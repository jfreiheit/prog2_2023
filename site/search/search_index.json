{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Programmieren II","text":"<p>Herzlich willkommen zur Programmieren II-Veranstaltung! Wir haben in Programmieren I unter Verwendung der Programmiersprache Java bereits wesentliche Konzepte kennengelernt, die f\u00fcr das Verst\u00e4ndnis moderner Programmierens notwendig sind. Diese Kenntnisse wollen wir nun erweitern und vertiefen. Wir werden Git kennenlernen, Exceptions, Wrapper-Klassen, Interfaces und Collections. Wir besch\u00e4ftigen uns intensiv mit dem Testen von Programmen und erzeugen uns eigene Nutzeroberfl\u00e4chen. Hier einige Tipps, damit Sie die Veranstaltung erfolgreich durchf\u00fchren und Sie dabei auch Spa\u00df haben:</p> <ol> <li>L\u00f6sen Sie alle \u00dcbungsaufgaben selbst\u00e4ndig! Es ist kein Problem, wenn Sie f\u00fcr das Bew\u00e4ltigen der \u00dcbungen etwas l\u00e4nger ben\u00f6tigen. Sollten Sie es gar nicht alleine schaffen, ist das auch kein Problem. Wichtig ist dann, dass Sie sich die L\u00f6sung anschauen und es erneut selbst\u00e4ndig versuchen. H\u00f6ren Sie nicht auf, bis Sie es geschafft haben!</li> <li>Sie k\u00f6nnen die Hausaufgaben zu zweit l\u00f6sen. Achten Sie aber darauf, dass Sie Ihre gemeinsame L\u00f6sung vollst\u00e4ndig verstanden haben und dass Sie sie danach auch alleine erstellen k\u00f6nnen. Sie k\u00f6nnen beim L\u00f6sen der Hausaufgaben beliebig kreativ sein! Die Aufgabenstellung gibt Ihnen Anhaltspunkte f\u00fcr eine eventuelle L\u00f6sung. Sie k\u00f6nnen es aber auch ganz anders machen!</li> <li>Die Klausurvorbereitung beginnt mit Beginn der Veranstaltung. Es ist nicht m\u00f6glich, die Klausur am Ende des Semesters zu bestehen, wenn Sie nicht das ganze Semester \u00fcber intensiv programmieren. Die \u00dcbungsaufgaben sind \"kleine\" Aufgaben, um das in der Vorlesung vermittelte Wissen direkt anzuwenden. F\u00fcr die L\u00f6sung der Hausaufgaben ist bereits ein gewisses Abstraktionsniveau erforderlich, um zu erkennen, dass das in der Vorlesung vermittelte Wissen daf\u00fcr ausreichend ist. </li> <li>Programmieren lernt man nur durch Programmieren. Sie m\u00fcssen es tun. Das Lesen von B\u00fcchern oder das \"Anschauen\" von Code gen\u00fcgt nicht. Eine Sprache lernt man auch nur durch Sprechen. Sie m\u00fcssen programmieren, programmieren, programmieren...</li> <li>Lassen Sie sich durch Fehler nicht verunsichern, sondern analysieren Sie Ihre Fehler. Bis zur Klausur sollten Sie alle Fehler einmal gemacht haben. Wenn Sie sich \u00fcberlegen, warum das jeweils ein Fehler war, dann werden Sie diesen Fehler nicht wiederholen und haben durch die Reflektion eine Menge gelernt. Fehler zu machen (und dar\u00fcber zu reflektieren) geh\u00f6rt zu den besten Lernmethoden des Programmierens.</li> <li>Haben Sie Spa\u00df! Je mehr Sie das Programmieren lernen, je mehr Spa\u00df werden Sie haben. Wir versuchen, dass Sie das ganze Semester \u00fcber Spa\u00df am Programmieren haben werden. Sollte es Ihnen zwischendurch keinen Spa\u00df mehr machen, geben Sie mir sofort Bescheid!</li> </ol> <p>Viel Erfolg! Und viel Spa\u00df!</p>"},{"location":"#organisatorisches","title":"Organisatorisches","text":"<p>Der Plan zur Durchf\u00fchrung der Veranstaltung ist derzeit wie folgt:</p> <ul> <li>Themen werden ausf\u00fchrlich in diesem Skript beschrieben und in den Vorlesungen eingef\u00fchrt und verdeutlicht.</li> <li>Die Veranstaltungen finden in Pr\u00e4senz statt. Es werden keine Videos erstellt.</li> <li>Das Skript wird f\u00fcr die jeweils kommende Woche freitags hochgeladen. </li> <li>Mit dem Skript wird sowohl die \u00dcbung f\u00fcr die kommende Woche als auch die neue Aufgabe hochgeladen.</li> <li>Die \u00dcbung (und die vergangene Aufgabe) werden donnerstags (8 - 9.30 bzw. 14-15.30 Uhr) besprochen. Sie k\u00f6nnen frei w\u00e4hlen, welche der beiden \u00dcbungen Sie besuchen.</li> <li>Die Veranstaltung wird durch ein Tutorium unterst\u00fctzt. Der Termin f\u00fcr das Tutorium wird noch bekanntgegeben.</li> <li>Sollten Sie W\u00fcnsche haben, diesen Plan zu \u00e4ndern, kommen Sie gerne auf mich zu</li> </ul> <p>Zur erfolgreichen Durchf\u00fchrung der Veranstaltung sollten Sie die Aufgaben l\u00f6sen und zu den jeweiligen Fristen auf Moodle hochladen. Es werden insgesamt wahrscheinlich 10 Aufgaben sein, die Sie selbst\u00e4ndig l\u00f6sen und hochladen. Sie k\u00f6nnen die Aufgaben auch zu zweit l\u00f6sen. Sollte Ihre L\u00f6sung der L\u00f6sung entsprechen, die im Tutorium erarbeitet wurde, brauchen Sie diese L\u00f6sung nicht hochzuladen. Am Ende des Semesters schreiben wir eine Klausur (am Rechner). Diese Klausur wird bewertet und entspricht der Note f\u00fcr das gesamte \"Programmieren\"-Modul. Bitte beachten Sie, dass das Modul erfahrungsgem\u00e4\u00df nur dann bestanden werden kann, wenn Sie die \u00dcbungen und Aufgaben selbstst\u00e4ndig l\u00f6sen k\u00f6nnen. Selbst wenn Ihnen zun\u00e4chst eine eigene L\u00f6sung schwerf\u00e4llt, m\u00fcssen Sie es irgendwann im Laufe des Semsters - am besten, jeweils so schnell wie m\u00f6glich - schaffen, diese Aufgaben selbstst\u00e4ndig zu implementieren.</p> <p>Unter Aufgaben sind die Aufgaben beschrieben, die Sie in jeder Woche ausf\u00fchren sollen. Damit Sie dies erfolgreich erledigen k\u00f6nnen, ist jeweils angegeben, welche Themen Sie daf\u00fcr durcharbeiten m\u00fcssen. Das Durcharbeiten der jeweiligen Themen entspricht jeweils einer Vorlesung. Diese wird also selbst\u00e4ndig durchgef\u00fchrt. </p> <p>Daneben gibt es jede Woche (zu jedem Thema) \u00dcbungen, die wir in den \u00dcbungszeiten besprechen. Diese dienen der Anwendung und der Festigung der erlangten Kenntnisse. Die \u00dcbungen sind kleine Aufgaben, an denen Sie das neue Wissen anwenden sollen. Die \u00dcbungen dienen der Bef\u00e4higung, die (gr\u00f6\u00dferen) Aufgaben l\u00f6sen zu k\u00f6nnen.  </p> <p>F\u00fcr die Kommunikation untereinander verwenden wir Slack. Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Au\u00dferdem lernen Sie beim Beantworten der Fragen nochmals deutlich mehr. Das w\u00e4re super, wenn das klappt!</p>"},{"location":"#grober-inhalt-kann-sich-noch-andern","title":"Grober Inhalt (kann sich noch \u00e4ndern)","text":"<p>Wir besch\u00e4ftigen uns dieses Semester mit weiteren Konzepten der Programmierung. Wir lernen weitere Datenstrukturen kennen (Collections), werden lernen, mit Exceptions umzugehen und implementieren Tests. Wir besch\u00e4ftigen uns mit Grafischen Nutzeroberfl\u00e4chen (GUIs) und lernen, Nutzereignisse zu behandeln.  </p> <p>Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). </p> Woche Themen (Vorlesung) \u00dcbung Aufgabe Abgabe Aufgabe bis 1. 10.-14.04.2023 Organisatorisches, Wiederholung, Aufz\u00e4hlungstypen, Einstieg - \u00a0- - 1. 17.-21.04.2023 Wrapper-Klassen (boxing und unboxing)Exceptions I \u00dcbung 1 Aufgabe 1 27.04.2023 2. 24.-28.04.2023 Exceptions II \u00dcbung 2 Aufgabe 2 04.05.2023 3. 01.-05.05.2023 Collections (List und Set) \u00dcbung 3 Aufgabe 3 18.05.2023 4. 08.-12.05.2023 Collections (Map) \u00dcbung 4 Aufgabe 4 25.05.2023 5. 15.-19.05.2023 - - - - 6. 22.-26.05.2023 Abstrakte Klassen \u00dcbung 5 Aufgabe 5 01.06.2023 7. 29.-02.06.2023 Interfaces \u00dcbung 6 Aufgabe 6 08.06.2023 8. 05.-09.06.2023 GUI Einf\u00fchrung \u00dcbung 7 Aufgabe 7 15.06.2023 9. 12.-16.06.2023 JUnit \u00dcbung 8 Aufgabe 8 22.06.2023 10. 19.-23.06.2023 Layout-Manager \u00dcbung 9 Aufgabe 9 29.06.2023 12. 26.-30.06.2023 GUI Ereignisse \u00dcbung 10 Aufgabe 10 06.07.2023 13. 03.-07.07.2023 ActionListener \u00dcbung 11 \u00a0- - 14. 10.-14.07.2023 Mausereignisse \u00dcbung 12 \u00a0- - 28.07.2023 14:00 Uhr Klausur 1.PZ Labore 6. Etage C-Geb\u00e4ude - - 29.09.2023 14:00 Uhr Klausur 2.PZ Labore 6. Etage C-Geb\u00e4ude - -"},{"location":"#inhalte","title":"Inhalte","text":"14.04.2023 - Einf\u00fchrung und Organisatorisches + Wiederholung + enum + Einstieg <ul> <li>siehe Organisatorisches</li> <li>siehe Wiederholung</li> <li>siehe Aufz\u00e4hlungstypen</li> <li>siehe Einstieg</li> <li>siehe Aufgabe 1</li> </ul> Code aus der Vorlesung Programmklasse.javaStaticLesson.javaWeekday.javaKonto.java <pre><code>package vorlesungen.vorlesung0414;\n\nimport javax.swing.JOptionPane;\n\npublic class Programmklasse {\n\npublic static void printIrgendwas(String ausgabe) {\nSystem.out.println(ausgabe);\n}\n\npublic static void printDay(int day) {\nswitch(day) {\ncase 0 -&gt; System.out.println(\"Montag\");\ncase 1 -&gt; System.out.println(\"Dienstag\");\ncase 2 -&gt; System.out.println(\"Mittwoch\");\ncase 3 -&gt; System.out.println(\"Donnerstag\");\ncase 4 -&gt; System.out.println(\"Freitag\");\ncase 5 -&gt; System.out.println(\"Samstag\");\ncase 6 -&gt; System.out.println(\"Sonntag\");\ndefault -&gt; System.out.println(\"kein Tag\");\n}\n}\n\n\npublic static void printDay(String day) {\nswitch(day) {\ncase \"Mo\" -&gt; System.out.println(\"Montag\");\ncase \"Di\" -&gt; System.out.println(\"Dienstag\");\ncase \"Mi\" -&gt; System.out.println(\"Mittwoch\");\ncase \"Do\" -&gt; System.out.println(\"Donnerstag\");\ncase \"Fr\" -&gt; System.out.println(\"Freitag\");\ncase \"Sa\" -&gt; System.out.println(\"Samstag\");\ncase \"So\" -&gt; System.out.println(\"Sonntag\");\ndefault -&gt; System.out.println(\"kein Tag\");\n}\n}\n\n\npublic static void printDay(Weekday day) {\nswitch(day) {\ncase MO -&gt; System.out.println(\"Montag\");\ncase DI -&gt; System.out.println(\"Dienstag\");\ncase MI -&gt; System.out.println(\"Mittwoch\");\ncase DO -&gt; System.out.println(\"Donnerstag\");\ncase FR -&gt; System.out.println(\"Freitag\");\ncase SA -&gt; System.out.println(\"Samstag\");\ncase SO -&gt; System.out.println(\"Sonntag\");\n}\n}\n\npublic static void main(String[] args) {\nprintIrgendwas(\"Endlich wieder Programmieren!\");\n\nStaticLesson.print();\n\nMath.abs(-5);\n\nSystem.out.println(StaticLesson.PI);\n\nKonto k1 = new Konto();\nKonto k2 = new Konto();\nKonto k3 = new Konto();\nKonto k4 = new Konto();\nSystem.out.println(k4.knr);\n\nKonto[] konten = new Konto[5];\nfor(int i = 0; i &lt; konten.length; i++) {\nkonten[i] = new Konto();\n}\n\nfor(Konto element : konten) {\nSystem.out.println(element.knr);\n}\n\nfor(int i = 0; i &lt; konten.length; i++) {\nSystem.out.println(konten[i].knr);\n}\n\n/*\n        int result = JOptionPane.showConfirmDialog(null, \"Wirklich beenden?\", \"Mein Titel\", JOptionPane.YES_NO_CANCEL_OPTION);\n        if(result == JOptionPane.NO_OPTION) {\n            System.out.println(\"Nein geklickt\");\n        } else if(result == JOptionPane.YES_OPTION) {\n            System.out.println(\"Ja geklickt\");\n        } else if(result == JOptionPane.CANCEL_OPTION) {\n            System.out.println(\"Abbrechen geklickt\");\n        }\n\n        String eingabe = JOptionPane.showInputDialog(\"Geben Sie eine Zahl :\");\n        System.out.println(\"Sie haben \" + eingabe + \" eingegeben\");\n*/\n\nprintDay(5);\nprintDay(\"hallo\");\n\nprintDay(Weekday.FR);\n\nWeekday day = Weekday.FR;\n}\n\n}\n</code></pre> <pre><code>package vorlesungen.vorlesung0414;\n\npublic class StaticLesson {\n\npublic static final double PI = 3.14;\n\npublic static void print() {\nSystem.out.println(\"Hallo FIW\");\n}\n\n}\n</code></pre> <pre><code>package vorlesungen.vorlesung0414;\n\npublic enum Weekday {\nMO, DI, MI, DO, FR, SA, SO\n}\n</code></pre> <pre><code>package vorlesungen.vorlesung0414;\n\npublic class Konto {\n\nint knr;\nstatic int anzKonten = 0;\n\nKonto() {\nthis.knr = anzKonten++;\n}\n\n}\n</code></pre> 21.04.2023 - Wrapper-Klassen und Exceptions I <ul> <li>siehe Wrapper-Klassen</li> <li>siehe Exceptions I</li> <li>siehe Aufgabe 2</li> </ul> Code aus der Vorlesung WrapperKlassen.java <pre><code>package vorlesungen.vorlesung0421;\n\nimport javax.swing.JOptionPane;\n\npublic class WrapperKlassen {\n\npublic static void main(String[] args) {\n\n\n// Wertetyp --&gt; Referenztyp\n\n// Kontruktoren deprecated -- nicht verwenden!\nInteger i1 = new Integer(100);\nInteger i2 = new Integer(\"100\");\n\nDouble d1 = new Double(5.5);\nDouble d2 = new Double(\"5.5\");\n\n// erste Moeglichkeit zur Objekterzeugung\nInteger i3 = Integer.valueOf(101);\nInteger i4 = Integer.valueOf(\"101\");\n\nCharacter c1 = Character.valueOf('a');\n//Character c2 = Character.valueOf(\"a\");\n\nBoolean b1 = Boolean.valueOf(true);\nBoolean b2 = Boolean.valueOf(\"true\");\n\n// zweite Moeglichkeit - Auto-Boxing\nInteger i5 = 5000;\nInteger i6 = 5000;\nInteger i7 = 5001;\n// Integer i6 = \"5000\";\n\nBoolean b3 = true;\n\n\n// Referenztyp --&gt; Wertetyp\n\n// erste Moeglichkeit xxxValue()\n\nint i10 = i3.intValue();\nboolean b10 = b1.booleanValue();\n\n// zweite Moeglichkeit Auto-Unboxing\n\nint i11 = i5;\nSystem.out.println(i5 == i6);   // false wegen Referenzvergleich\nSystem.out.println(i7 &gt; i6);    // true wegen Auto-Unboxing\nboolean eingabeOk = false;\nString message = \"Geben Sie eine Zahl ein : \";\nwhile(!eingabeOk) {\n\nString eingabe = JOptionPane.showInputDialog(message);\nSystem.out.println(\"Sie haben \" + eingabe + \" eingegeben.\");\n\ntry {\n//double nr2 = Double.parseDouble(eingabe);\n//System.out.println(\"double-Zahl \" + nr2);\nint number = Integer.parseInt(eingabe);\nint nr1 = 5;\nint result = nr1 / number;\nSystem.out.println(nr1 + \"/\" + number + \" = \" + result);\neingabeOk = true;\n} catch(NumberFormatException e) {\nmessage = \"Eingabe war keine Zahl!\";\n}\ncatch(ArithmeticException e) {\nmessage = \"Durch 0 kann nicht dividiert werden!\";\n}\n\n}\n\nSystem.out.println(\"Ende\");\n\n\n}\n\n}\n</code></pre> Video der Vorlesung 28.04.2023 - Exceptions II <ul> <li>siehe Exceptions II</li> <li>siehe Aufgabe 3</li> </ul> Code aus der Vorlesung Ausnahmen.javaTriangle.javaIllegalSideLengthException.javaIllegalTriangleException.java <pre><code>package vorlesungen.vorlesung0428;\n\npublic class Ausnahmen {\n\nstatic int getValueAtIndex(int[] field, int index) throws ArrayIndexOutOfBoundsException\n{\nreturn field[index];\n}\n\nstatic char getValueAtIndex(String input, int index) throws StringIndexOutOfBoundsException\n{\nreturn input.charAt(index);\n}\n\npublic static void main(String[] args) {\nString[] basen = {\"2\", \"8\", \"10\", \"Hi\"};\ndouble result= 0;\n\nfor(int index = 0; index &lt;= basen.length; index++) {\n\ntry {\nString basisString = basen[index];\n\nint basis = Integer.parseInt(basisString);\n\nfor(int exp = 0; exp&lt;6; exp++) {\nresult = Math.pow(basis, exp);\nSystem.out.printf(\"%d ^ %d = %.0f %n\", basis, exp, result);\n}\n\n}catch(NumberFormatException e)\n{\nSystem.out.println(\"keine Zahl!\");\n}catch(ArrayIndexOutOfBoundsException e)\n{\nSystem.out.println(\"kein korrekter Index!\");\n}\n\n}\n\nint[] arr = {1, 2, 3, 4, 5 };\n\ntry {\ngetValueAtIndex(arr, 5);\n} catch (ArrayIndexOutOfBoundsException e) {\n// TODO Auto-generated catch block\n//e.printStackTrace();\n}\n\nTriangle t1 = new Triangle(0, 4, 3);\nSystem.out.println(t1.area());\n\n\nSystem.out.println(\"Ende\");\n}\n}\n</code></pre> <pre><code>package vorlesungen.vorlesung0428;\n\npublic class Triangle {\nprivate int a;\nprivate int b;\nprivate int c;\n\npublic Triangle(int a, int b, int c) throws IllegalSideLengthException, IllegalTriangleException\n{\nif(a &lt;= 0 || b&lt;= 0 || c &lt;= 0) {\nthrow new IllegalSideLengthException();\n} else if(a &gt;= (b+c) || b &gt;= (a+c) || c &gt;= (a+b)) {\nthrow new IllegalTriangleException();\n}\nelse {\nthis.a = a;\nthis.b = b;\nthis.c = c;\n}\n}\n\npublic int circumference()\n{\nreturn this.a + this.b + this.c;\n}\n\npublic double area()\n{\ndouble area = 0.0;\ndouble s = 0.5 * (this.a+this.b+this.c);\narea = Math.sqrt(s * (s-this.a) * (s-this.b) * (s-this.c));\nreturn area;\n}\n\npublic boolean equilateral()\n{\nreturn this.a==this.b &amp;&amp; this.b==this.c;\n}\n\npublic boolean isosceles()\n{\nreturn this.a==this.b || this.b==this.c || this.c==this.a;\n}\n\npublic void print()\n{\nSystem.out.println(\"Seiten          : a=\" + this.a + \", b=\" + this.b + \", c=\" + this.c);\nSystem.out.println(\"Umfang          : \" + this.circumference());\nSystem.out.println(\"Flaecheninhalt  : \" + this.area());\nif(this.equilateral())\n{\nSystem.out.println(\"Das Dreieck ist gleichseitig.\");\n}\nelse\n{\nif(this.isosceles())\n{\nSystem.out.println(\"Das Dreieck ist gleichschenklig.\");\n}\nelse\n{\nSystem.out.println(\"Das Dreieck ist unregelmaessig.\");\n}\n}\nif(this.isRightAngled())\n{\nSystem.out.println(\"Das Dreieck ist rechtwinklig.\");\n}\nelse\n{\nSystem.out.println(\"Das Dreieck ist nicht rechtwinklig.\");\n}\nSystem.out.println();\n}\n\npublic boolean sameCircumference(Triangle t)\n{\nreturn this.circumference()==t.circumference();\n}\n\npublic boolean sidesAreEqual(Triangle t)\n{\nreturn (this.a==t.a &amp;&amp; this.b==t.b &amp;&amp; this.c==t.c) ||\n(this.a==t.b &amp;&amp; this.b==t.c &amp;&amp; this.c==t.a) ||\n(this.a==t.c &amp;&amp; this.b==t.a &amp;&amp; this.c==t.b);\n}\n\npublic boolean isRightAngled()\n{\nreturn ((this.a*this.a == (this.b*this.b + this.c*this.c)) ||\n(this.b*this.b == (this.a*this.a + this.c*this.c)) ||\n(this.c*this.c == (this.b*this.b + this.a*this.a)));\n}\n\npublic boolean isSmaller(Triangle t)\n{\nreturn this.area() &lt; t.area();\n}\n\npublic boolean isBigger(Triangle t)\n{\nreturn this.area() &gt; t.area();\n}\n\n}\n</code></pre> <pre><code>package vorlesungen.vorlesung0428;\n\npublic class IllegalSideLengthException extends RuntimeException\n{\npublic IllegalSideLengthException(String s)\n{\nsuper(s);\n}\n\npublic IllegalSideLengthException()\n{\nsuper(\"All sides must be greater than zero!\");\n}\n}\n</code></pre> <pre><code>package vorlesungen.vorlesung0428;\n\npublic class IllegalTriangleException extends RuntimeException\n{\npublic IllegalTriangleException(String s)\n{\nsuper(s);\n}\n\npublic IllegalTriangleException()\n{\nsuper(\"No side greater than the sum of the other sides!\");\n}\n}\n</code></pre>"},{"location":"aufgaben/","title":"Aufgaben","text":""},{"location":"aufgaben/#aufgabe-1-wurfelspiel","title":"Aufgabe 1 (W\u00fcrfelspiel)","text":"Aufgabe 1 <p>Vorbereitung (siehe Einstieg)</p> <ol> <li>Informieren Sie sich \u00fcber die Klasse <code>JOptionPane</code> aus dem Paket <code>javax.swing</code> (z.B. hier oder hier oder hier)  Sollten Sie mit dem Java-Modulsystem arbeiten, d.h. sollten Sie in Ihrem Java-Projekt eine Datei <code>module-info.java</code> haben, dann m\u00fcssen Sie in diese Datei (in den Anweisungsblock) die Anweisung <code>requires java.desktop;</code> einf\u00fcgen - das ist das Modul, in dem sich das Paket <code>javax.swing</code> befindet. </li> <li>Erstellen Sie insbesondere folgenden Dialog (in den Buttons kann auch <code>Yes</code> und <code>No</code> stehen) und pr\u00fcfen Sie, ob der <code>Nein</code>- oder der <code>Ja</code>-Button gedr\u00fcckt wurde (im Beispiel steht <code>A</code> f\u00fcr den Namen eines Spielers \u2013 siehe Aufgabe unten):     </li> </ol> <p>Aufgabe</p> <ol> <li>Implementieren Sie folgendes W\u00fcrfelspiel:<ul> <li>An dem Spiel k\u00f6nnen beliebig viele Spieler teilnehmen.</li> <li>Die Spieler sind nacheinander an der Reihe.</li> <li>Wenn ein Spieler an der Reihe ist, dann befindet er sich in einem Versuch.</li> <li>In einem Versuch kann der Spieler so lange w\u00fcrfeln, bis er entweder<ul> <li>eine 6 w\u00fcrfelt oder er</li> <li>den Versuch freiwillig beendet.  </li> </ul> </li> <li>Hat der Spieler eine 6 gew\u00fcrfelt, wird der gesamte Versuch mit <code>0</code> Punkten bewertet.</li> <li>Hat der Spieler den Versuch freiwillig beendet, wird die in dem Versuch erzielte Summe aus sein Punktekonto addiert (gespeichert).</li> </ul> </li> <li>Der Spieler, der zuerst eine bestimmte Punktzahl (z.B. <code>20</code>) erreicht hat, hat gewonnen.      Beispiel mit zwei Spielern <code>A</code> und <code>B</code> bis Gesamtpunktzahl <code>20</code>:     </li> <li>Laden Sie Ihr L\u00f6sung in Moodle hoch! Viel Spa\u00df und viel Erfolg!</li> </ol>"},{"location":"aufgaben/#aufgabe-2-myinteger","title":"Aufgabe 2 (MyInteger)","text":"Aufgabe 2 <p>Vorbereitung (Selbstudium)</p> <ol> <li>Eine statische Variable wird mit dem Schl\u00fcsselwort <code>static</code> deklariert, also z.B. <code>static int myVariable = 0;</code>. Der Zugriff auf eine solche statische Variable erfolgt nicht \u00fcber eine Referenzvariable, sondern \u00fcber den Klassennamen. Angenommen, die Variable <code>myVariable</code> wurde in der Klasse <code>MyClass</code> deklariert, dann erfolgt der Zugriff auf die Variable \u00fcber <code>MyClass.myVariable</code>. F\u00fcr Objektvariablen gilt, dass jedes Objekt seine eigene(n) Objektvariable(n) hat. Statische Variablen gibt es in der Klasse genau einmal. Alle Objekte \"teilen\" sich eine statische Variable. Eine statische Variable hei\u00dft deshalb auch Klassenvariable.</li> <li>Eine statische Methode wird ebenfalls mit dem Schl\u00fcsselwort <code>static</code> deklariert, also z.B. <code>public static void myMethod() {}</code>. Der Zugriff auf eine solche statische Methode erfolgt nicht \u00fcber eine Referenzvariable, sondern \u00fcber den Klassennamen. Angenommen, die Methode <code>myMethod()</code> wurde in der Klasse <code>MyClass</code> deklariert, dann erfolgt der Zugriff auf die Methode \u00fcber <code>MyClass.myMethod()</code>. Wir kennen solche Methoden bereits, z.B. sind alle Methoden aus der Klasse <code>Math</code> statisch und wir k\u00f6nnen sie z.B. mit <code>Math.sqrt(value)</code> oder <code>Math.abs(value)</code> aufrufen. </li> <li>siehe z.B. hier oder hier oder hier</li> </ol> <p>Info: Die Klasse <code>MyInteger</code> ist eine sogenannte Wrapper-Klasse. Die Idee ist, dass <code>MyInteger</code> eine objektorientierte H\u00fclle um den <code>int</code>-Typ darstellt. Implementieren Sie die Klasse <code>MyInteger</code>. Diese Klasse hat folgende Eigenschaften:</p> <ol> <li>Statische Konstanten vom Typ <code>int</code> <code>MAX_VALUE</code> und <code>MIN_VALUE</code>, welche als Wert die gr\u00f6\u00dfte bzw. kleinste <code>int</code>-Zahl enthalten.</li> <li>Eine private Objektvariable <code>value</code> vom Typ <code>int</code>. (Dieser <code>value</code> hat jetzt eine \"objektorientierte\" H\u00fclle: <code>MyInteger</code>).</li> <li>Eine statische Methode <code>parseInt(String s)</code>, die den \u00fcbergebenen <code>String s</code> als <code>int</code>-Zahl zur\u00fcckgibt, wenn <code>s</code> einer Zahl entspricht. Wenn nicht, wirft die Methode eine <code>IllegalArgumentException</code>. Beachten Sie:     a.  <code>s</code> kann mit <code>+</code> oder <code>\u2013</code> beginnen,     b.  <code>s</code> kann f\u00fchrende Nullen aufweisen,     c.  die L\u00e4nge von <code>s</code> kann mit <code>s.length()</code> ermittelt und jedes einzelne Zeichen aus <code>s</code> kann mit <code>s.charAt(index)</code> betrachtet werden.      d.  Ist <code>s</code> leer, wird eine <code>IllegalArgumentException</code> geworfen und wenn <code>s</code> keiner Zahl entspricht auch.     e.  Die Exception wird nur weitergereicht, nicht hier behandelt.</li> <li>Zwei Konstruktoren <code>MyInteger(int value)</code> und <code>MyInteger(String s)</code>, die jeweils die Objektvariable <code>value</code> initialisieren. Der zweite Konstruktor verwendet <code>parseInt(String)</code> und kann ebenfalls eine <code>IllegalArgumentException</code> werfen (reicht die Exception von <code>parseInt(String)</code> weiter). </li> <li>Eine Objektmethode <code>intValue()</code>, die den Wert von <code>value</code> zur\u00fcckgibt.</li> <li>Eine Objektmethode <code>doubleValue()</code>, die den Wert von <code>value</code> als <code>double</code> zur\u00fcckgibt.</li> <li>Eine statische Methode <code>valueOf(String s)</code>, die ein Objekt von <code>MyInteger</code> erzeugt und zur\u00fcckgibt (und evtl. eine <code>IllegalArgumentException</code> wirft).</li> <li>Eine statische Methode <code>valueOf(int value)</code>, die ein Objekt von <code>MyInteger</code> erzeugt und zur\u00fcckgibt.</li> <li>\u00dcberschreiben Sie au\u00dferdem die Methoden <code>equals()</code> und <code>toString()</code> (Zusatz:  auch <code>hashCode()</code> \u00fcberschreiben).</li> <li>Testen Sie Ihre Klasse ausf\u00fchrlich in einer <code>Testklasse</code> mit <code>main()</code>-Methode.</li> <li>Laden Sie Ihr L\u00f6sung in Moodle hoch! Viel Spa\u00df und viel Erfolg!</li> </ol>"},{"location":"aufgaben/#aufgabe-3-solitaire","title":"Aufgabe 3 (Solitaire)","text":"Aufgabe 3 <p>Information und Vorbereitung</p> <p>Wir wenden Aufz\u00e4hlungstypen und mehrdimensionale Arrays an. </p> <p>Wir beginnen, ein Englisches Solit\u00e4r zu programmieren. Einige kennen es auch als Steckhalma. Ziel des Spiels ist, alle Steine bis auf einen (der am besten in der Mitte \u00fcbrig bleibt), zu entfernen. Ein Zug ist wie folgt: ein Stein springt \u00fcber einen anderen Stein und der \u00fcbersprungene Stein wird entfernt. Es gibt viele L\u00f6sungen daf\u00fcr. </p> <p>Teil der Aufgabe ist es auch, \"fremden\" Code zu lesen und zu verstehen, denn einige Klassen sind bereits gegeben:</p> Klasse Point.java <pre><code>package aufgaben.aufgabe3;\n\n/*\n * ein Point repreasentiert eine Position\n * im Spielfeld, bestehend aus der Nummer \n * fuer die Zeile (row) und der Nummer\n * fuer die Spalte (col)\n */\npublic class Point {\nprivate int row;\nprivate int col;\n\n/*\n     * Konstruktor zur Erzeugung einer \n     * Position bestehend aus row und col\n     */\npublic Point(int row, int col)\n{\nthis.row = row;\nthis.col = col;\n}\n\npublic int getRow() {\nreturn this.row;\n}\n\npublic int getCol() {\nreturn this.col;\n}\n\n@Override\npublic String toString()\n{\nreturn \"(\"+ this.row + \",\" + this.col + \")\";\n}\n}\n</code></pre> Klasse Move.java <pre><code>package aufgaben.aufgabe3;\n\n/*\n * diese Klasse repraesentiert einen Zug\n * Variablen sind Point from\n * und Point to\n * es wird nicht geprueft, ob der Zug ueberhaupt\n * moeglich ist\n */\npublic class Move {\nprivate Point from;\nprivate Point to;\n\n/*\n     * ein Zug von dem from-Point (fromRow,fromCol)\n     * zum to-Point (toRow,toCol)\n     */\npublic Move(int fromRow, int fromCol, int toRow, int toCol)\n{\nthis.from = new Point(fromRow, fromCol);\nthis.to = new Point(toRow, toCol);\n}\n\n/*\n     * in dem Konstruktor werden in this.from und this.to nicht einfach\n     * die Referenzen von from und to gespeichert, sondern davon Kopien\n     * erstellt, damit das Programm robuster gegen das Aendern von\n     * Referenzen ist\n     */\npublic Move(Point from, Point to)\n{\nthis.from = new Point(from.getRow(), from.getCol());\nthis.to = new Point(to.getRow(), to.getCol());\n}\n\n/*\n     * der Getter fuer den Point from gibt keine Referenz auf\n     * den Point from zurueck, sondern eine Kopie (einen Klon)\n     * von from --&gt; Referenzen koennen \"verbogen\" werden, aber\n     * die Kopien bleiben unveraendert\n     */\npublic Point getFrom()\n{\nreturn new Point(this.from.getRow(), this.from.getCol());\n}\n\n/*\n     * der Getter fuer den Point to gibt keine Referenz auf\n     * den Point to zurueck, sondern eine Kopie (einen Klon)\n     * von to --&gt; Referenzen koennen \"verbogen\" werden, aber\n     * die Kopien bleiben unveraendert\n     */\npublic Point getTo()\n{\nreturn new Point(this.to.getRow(), this.to.getCol());\n}\n\n}\n</code></pre> Klasse Moves.java <pre><code>package aufgaben.aufgabe3;\n\n/*\n * diese Klasse repraesentiert eine Folge \n * von Zuegen (Move), die in einem Array\n * moves gespeichert sind\n */\npublic class Moves {\nprivate Move[] moves;\n\n/*\n     * der Konstruktor erstellt ein leeres moves-Array\n     * (d.h. noch keine Zuege (Moves) gespeichert)\n     */\npublic Moves()\n{\nthis.moves = new Move[0];\n}\n\n/*\n     * der Konstruktor erstellt ein moves-Array mit einem\n     * Move - dem erste Zug (firstMove) \n     */\npublic Moves(Move firstMove)\n{\nthis.moves = new Move[1];\nthis.moves[0] = firstMove;\n}\n\n/*\n     * Anzahl der bisher gespeicherten Zuege\n     */\npublic int getLength()\n{\nreturn this.moves.length;\n}\n\n/*\n     * fuegt einen Zug (nextMove) zum moves-Array hinzu\n     * dazu muss das moves-Array um 1 laenger sein als zuvor\n     * es wird eine Kopie aller Zuege erstellt und dann\n     * der nextMove hinzugefuegt\n     */\npublic void addMove(Move nextMove)\n{\nMove[] newMoves = new Move[this.moves.length + 1];\nfor (int index = 0; index &lt; this.moves.length; index++) {\nnewMoves[index] = this.moves[index];\n}\nnewMoves[newMoves.length - 1] = new Move(nextMove.getFrom(), nextMove.getTo());\nthis.moves = newMoves;\n}\n\n/*\n     * gibt den Move zurueck, der im moves-Array unter dem Index index\n     * gespeichert ist;\n     * kann sein, dass index kein korrekter Index im moves-Array ist, \n     * dann wird eine IllegalArgumentException geworfen\n     */\npublic Move getMoveAtIndex(int index) throws IllegalArgumentException\n{\ntry {\nreturn this.moves[index];\n}\ncatch(ArrayIndexOutOfBoundsException e)\n{\nthrow new IllegalArgumentException(\"kein gueltiger Index!\");\n}\n}\n\n/*\n     * Ausgabe aller im moves-Array gespeicherten Zuege\n     * wird nur zum Debuggen benoetigt\n     */\npublic void printMoves()\n{\nSystem.out.printf(\"%n---%n\");\nfor (int index = 0; index &lt; this.moves.length; index++) {\nMove move = this.moves[index];\nPoint from = move.getFrom();\nPoint to = move.getTo();\nSystem.out.println(from.toString() + \" --&gt; \" + to.toString());\n}\nSystem.out.printf(\"%n---%n%n\");\n}\n}\n</code></pre> enum State.java <pre><code>package aufgaben.aufgabe3;\n\n/*\n * FREE - der Platz ist ein Spielfeld, aber kein Spielstein drauf\n * USED - der Platz ist ein Spielfeld mit Spielstein drauf\n * NOT  - der Platz gehoert nicht zum Spielfeld\n */\npublic enum State {\nFREE, USED, NOT\n}       </code></pre> <p>Aufgabe</p> <p>Bef\u00fcllen Sie die Klasse <code>Solitaire.java</code>, wie in den Kommentaren beschrieben:</p> Klasse Solitaire.java <pre><code>package aufgaben.aufgabe3.loesung;\n\npublic class Solitaire {\nprivate Moves game;\nprivate State[][] field;\n\npublic Solitaire()\n{\nthis.game = new Moves();\nthis.field = new State[7][7];\nfor(int row = 0; row &lt; this.field.length; row++)\n{\nfor(int col = 0; col &lt; this.field[row].length; col++)\n{\nif((row &lt; 2 || row &gt; 4) &amp;&amp; (col &lt; 2 || col &gt; 4))\n{\nthis.field[row][col] = State.NOT;\n}\nelse\n{\nthis.field[row][col] = State.USED;\n}\n}\n}\nthis.field[3][3] = State.FREE;\n}\n\n/*\n     * Geben Sie das Spielfeld aus! Am Anfang sollte auf der\n     * Konsole so ein Bild erscheinen:\n     *     o o o     \n     *     o o o     \n     * o o o o o o o \n     * o o o   o o o \n     * o o o o o o o \n     *     o o o     \n     *     o o o \n     * \n     */\npublic void print()\n{\n\n}\n\n/*\n     * diese Methode gibt ein true zurueck, wenn von der\n     * uebergebenen Position (row,col) ein Zug moeglich ist\n     * d.h. \n     * 1. auf der angegebenen Position muss ein Stein sein\n     * 2. zwei Steine weiter (oben, unten, rechts oder links)\n     *      darf kein Stein sein\n     * 3. dazwischen muss ein Stein sein\n     */\npublic boolean possibleFrom(int row, int col)\n{\n\nreturn false;\n}\n\n/*\n     * diese Methode gibt alle Positionen (Point) zurueck,\n     * AUF die von (fromRow,fromCol) aus gesprungen werden\n     * kann\n     */\npublic Point[] possibleTo(int fromRow, int fromCol)\n{\nif(!possibleFrom(fromRow, fromCol)) return new Point[0];\n\n/* \n         * naechste Zeile muss entfernt werden!\n         * sttatdessen muessen Sie alle Point-Objekte ermitteln AUF die\n         * gesprungen werden kann. Diese Point-Objekte werden in einem \n         * Point-Array gespeichert, welches zur\u00fcckgegeben wird.\n         */\nreturn null;\n}\n\n/* \n     * diese Methode erzeugt ein Moves-Objekt\n     * in dieses Moves-Objekt werden mithilfe der\n     * Objektmethode addMove() (aus Moves) alle\n     * moeglichen Zuege hinzugefuegt\n     * (moeglich im aktuellen Zustand von field[][])\n     */\npublic Moves possibleMoves()\n{\nMoves possibleMoves = new Moves();\n\n// next line for debugging\npossibleMoves.printMoves();\nreturn possibleMoves;\n}\n\n/*\n     * gibt ein true zurueck, wenn im aktuellen Zustand \n     * von field[][] ueberhaupt noch ein Zug moeglich ist\n     * sonst false\n     */\npublic boolean movePossible()\n{\n\nreturn false;\n}\n\n/*\n     * ruft die Methode move(Move move) auf,\n     * wenn ein Zug moeglich ist (dann true zurueck)\n     * sonst false\n     */\npublic boolean moveFirstPossible()\n{\nif(!movePossible()) return false;\n/*\n         *  hier einen moeglichen Zug ausfuehren\n         *  den ersten, den Sie finden (siehe\n         *  possibleMoves() )\n         */\nreturn true;\n}\n\n/*\n     * hier wird der Zug Move move ausgefuehrt\n     * nach dem Zug ist \n     * 1. die from-Position leer\n     * 2. die to-Position mit einem Stein besetzt\n     * 3. dazwischen leer (Stein wird \"entfernt\")\n     * falls Zug nicht moeglich, wird eine \n     * IllegalArgumentException geworfen \n     */\npublic void move(Move move) throws IllegalArgumentException\n{\n\n}\n\n}\n</code></pre> <p>Sie k\u00f6nnen selbstverst\u00e4ndlich beliebig viele weitere (Hilfs-)Methoden hinzuf\u00fcgen. </p> <p>Testen Sie Ihr Spiel in einer <code>Testklasse</code>. F\u00fchren Sie einige Z\u00fcge aus und geben danach immer das Spielfeld auf die Konsole aus. Die Konsole k\u00f6nnte z.B. dann so aussehen:</p> m\u00f6gliche Konsolenausgaben <pre><code>    o o o     o o o     \no o o o o o o \no o o   o o o \no o o o o o o o o o     o o o     \n\n\n---\n(1,3) --&gt; (3,3)\n(3,1) --&gt; (3,3)\n(3,5) --&gt; (3,3)\n(5,3) --&gt; (3,3)\n\n---\n\n    o o o     o   o     \no o o   o o o \no o o o o o o \no o o o o o o o o o     o o o     \n\n\n---\n(2,1) --&gt; (2,3)\n(2,5) --&gt; (2,3)\n(4,3) --&gt; (2,3)\n\n---\n\n    o o o     o   o     \no     o o o o \no o o o o o o \no o o o o o o o o o     o o o     \n\n\n---\n(0,2) --&gt; (2,2)\n(2,4) --&gt; (2,2)\n(3,3) --&gt; (1,3)\n(4,1) --&gt; (2,1)\n(4,2) --&gt; (2,2)\n\n---\n\n      o o     o     \no   o o o o o \no o o o o o o \no o o o o o o o o o     o o o     \n\n\n---\n(0,4) --&gt; (0,2)\n(2,3) --&gt; (2,1)\n(3,2) --&gt; (1,2)\n(3,3) --&gt; (1,3)\n(4,1) --&gt; (2,1)\n\n---\n\n    o         o     \no   o o o o o \no o o o o o o \no o o o o o o o o o     o o o     \n\n\n---\n(2,3) --&gt; (2,1)\n(2,4) --&gt; (0,4)\n(3,2) --&gt; (1,2)\n(3,3) --&gt; (1,3)\n(4,1) --&gt; (2,1)\n\n---\n\n    o         o     \no o     o o o \no o o o o o o \no o o o o o o o o o     o o o     \n\n\n---\n(2,0) --&gt; (2,2)\n(2,4) --&gt; (0,4)\n(2,5) --&gt; (2,3)\n(4,2) --&gt; (2,2)\n(4,3) --&gt; (2,3)\n\n---\n\n    o         o     o   o o o \no o o o o o o \no o o o o o o o o o     o o o     \n\n\n---\n(2,4) --&gt; (0,4)\n(2,5) --&gt; (2,3)\n(3,2) --&gt; (1,2)\n(4,0) --&gt; (2,0)\n(4,1) --&gt; (2,1)\n(4,3) --&gt; (2,3)\n\n---\n\n    o   o     o     o o \no o o o o o o \no o o o o o o o o o     o o o     \n\n\n---\n(2,6) --&gt; (2,4)\n(3,2) --&gt; (1,2)\n(4,0) --&gt; (2,0)\n(4,1) --&gt; (2,1)\n(4,3) --&gt; (2,3)\n(4,4) --&gt; (2,4)\n\n---\n\n    o   o     o   o     \no o o o o o o \no o o o o o o o o o     o o o     \n\n\n---\n(3,2) --&gt; (1,2)\n(3,4) --&gt; (1,4)\n(4,0) --&gt; (2,0)\n(4,1) --&gt; (2,1)\n(4,3) --&gt; (2,3)\n(4,5) --&gt; (2,5)\n(4,6) --&gt; (2,6)\n\n---\n\n    o   o     o         o     \no o   o o o o \no o o o o o o o o o     o o o     \n\n\n---\n(0,2) --&gt; (2,2)\n(3,0) --&gt; (3,2)\n(3,4) --&gt; (1,4)\n(3,4) --&gt; (3,2)\n(4,0) --&gt; (2,0)\n(4,1) --&gt; (2,1)\n(4,3) --&gt; (2,3)\n(4,5) --&gt; (2,5)\n(4,6) --&gt; (2,6)\n(5,2) --&gt; (3,2)\n\n---\n\n        o     o   o     \no o   o o o o \no o o o o o o o o o     o o o     \n\n\n---\n(3,0) --&gt; (3,2)\n(3,4) --&gt; (1,4)\n(3,4) --&gt; (3,2)\n(4,0) --&gt; (2,0)\n(4,1) --&gt; (2,1)\n(4,3) --&gt; (2,3)\n(4,5) --&gt; (2,5)\n(4,6) --&gt; (2,6)\n(5,2) --&gt; (3,2)\n\n---\n\n        o     o   o     o o o o o \no o o o o o o o o o     o o o     \n\n\n---\n(3,2) --&gt; (1,2)\n(3,3) --&gt; (3,1)\n(3,4) --&gt; (1,4)\n(4,3) --&gt; (2,3)\n(4,5) --&gt; (2,5)\n(4,6) --&gt; (2,6)\n\n---\n\n        o     o         o     o o o o \no o o o o o o o o o     o o o     \n\n\n---\n(3,4) --&gt; (1,4)\n(3,4) --&gt; (3,2)\n(4,3) --&gt; (2,3)\n(4,5) --&gt; (2,5)\n(4,6) --&gt; (2,6)\n(5,2) --&gt; (3,2)\n\n---\n\n        o     o   o     o   o o \no o o o o o o o o o     o o o     \n\n\n---\n(0,4) --&gt; (2,4)\n(3,6) --&gt; (3,4)\n(4,3) --&gt; (2,3)\n(4,5) --&gt; (2,5)\n(4,6) --&gt; (2,6)\n(5,2) --&gt; (3,2)\n(5,4) --&gt; (3,4)\n\n---\n\n\n    o         o     o   o o \no o o o o o o o o o     o o o     \n\n\n---\n(3,6) --&gt; (3,4)\n(4,3) --&gt; (2,3)\n(4,5) --&gt; (2,5)\n(4,6) --&gt; (2,6)\n(5,2) --&gt; (3,2)\n(5,4) --&gt; (3,4)\n\n---\n\n\n    o         o     o o     \no o o o o o o o o o     o o o     \n\n\n---\n(3,3) --&gt; (3,5)\n(3,4) --&gt; (1,4)\n(3,4) --&gt; (3,2)\n(4,3) --&gt; (2,3)\n(5,2) --&gt; (3,2)\n\n---\n\n\n    o         o     o   \no o o o o o o o o o     o o o     \n\n\n---\n(4,5) --&gt; (2,5)\n(5,2) --&gt; (3,2)\n(5,3) --&gt; (3,3)\n(5,4) --&gt; (3,4)\n\n---\n\n\n    o         o o   \n\no o o o o   o o o o     o o o     \n\n\n---\n(2,4) --&gt; (2,6)\n(2,5) --&gt; (2,3)\n(4,3) --&gt; (4,5)\n(5,2) --&gt; (3,2)\n(5,3) --&gt; (3,3)\n(5,4) --&gt; (3,4)\n\n---\n\n\n    o         o \n\no o o o o   o o o o     o o o     \n\n\n---\n(4,3) --&gt; (4,5)\n(5,2) --&gt; (3,2)\n(5,3) --&gt; (3,3)\n(5,4) --&gt; (3,4)\n\n---\n\n\n    o         o \n\no o o     o o o o o     o o o     \n\n\n---\n(4,1) --&gt; (4,3)\n(4,6) --&gt; (4,4)\n(5,2) --&gt; (3,2)\n(6,3) --&gt; (4,3)\n(6,4) --&gt; (4,4)\n\n---\n\n\n    o         o \n\no     o   o o o o o     o o o     \n\n\n---\n(4,6) --&gt; (4,4)\n(5,3) --&gt; (3,3)\n(6,2) --&gt; (4,2)\n(6,4) --&gt; (4,4)\n\n---\n\n\n    o         o \n\no     o o     o o o     o o o     \n\n\n---\n(4,3) --&gt; (4,5)\n(4,4) --&gt; (4,2)\n(5,3) --&gt; (3,3)\n(5,4) --&gt; (3,4)\n(6,2) --&gt; (4,2)\n\n---\n\n\n    o         o \n\no         o   o o o     o o o     \n\n\n---\n(6,2) --&gt; (4,2)\n(6,3) --&gt; (4,3)\n(6,4) --&gt; (4,4)\n\n---\n\n\n    o         o \n\no   o     o   o o     o o     \n\n\n---\n(5,4) --&gt; (5,2)\n(6,3) --&gt; (4,3)\n(6,4) --&gt; (4,4)\n(6,4) --&gt; (6,2)\n\n---\n\n\n    o         o \n\no   o     o   o         o o     \n\n\n---\n(4,2) --&gt; (6,2)\n(5,2) --&gt; (3,2)\n(6,4) --&gt; (6,2)\n\n---\n\n\n    o         o \n\no         o   o o o     o         o \n\no         o   o o o     </code></pre> <p>Dabei steht z.B.  <pre><code>    ---\n    (1,3) --&gt; (3,3)\n(3,1) --&gt; (3,3)\n(3,5) --&gt; (3,3)\n(5,3) --&gt; (3,3)\n\n---\n</code></pre> f\u00fcr die in dem Zustand dar\u00fcber m\u00f6glichen Z\u00fcge.  </p>"},{"location":"aufgaben/#aufgabe-4-operationen-uber-mengen","title":"Aufgabe 4 (Operationen \u00fcber Mengen)","text":"Aufgabe 4 <p>Implementieren Sie eine Klasse <code>SetOperations</code>. </p> <ol> <li>Erstellen Sie drei Objektvariablen (z.B. <code>numbers1</code>, <code>numbers2</code> und <code>both</code>) vom Typ <code>Set&lt;Integer&gt;</code>. Erzeugen Sie f\u00fcr diese Objektvariablen <code>TreeSet</code>-Objekte.</li> <li>Erstellen Sie eine Objektmethode <code>fill()</code>. In dieser Methode sollen die beiden Sets <code>numbers1</code> und <code>numbers2</code> mit Zufallszahlen aus dem Wertebereich <code>0..99</code> bef\u00fcllt werden. Erzeugen Sie jeweils <code>100</code> Zufallszahlen (die <code>number</code>s-Sets werden dann aber jeweils weniger als 100 Eintr\u00e4ge haben, da doppelte Elemente nicht aufgenommen werden.)  Beachten Sie, dass die <code>nextInt()</code>-Methode ein <code>int</code> zur\u00fcckliefert. Dieses int muss zun\u00e4chst in ein <code>Integer</code>-Objekt umgewandelt werden (<code>Integer.valueOf(int)</code>) und dieses <code>Integer</code>-Objekt wird dann dem Set hinzugef\u00fcgt (wenn es nicht schon enthalten ist).</li> <li>Erstellen Sie eine Objektmethode <code>fillBothUnion()</code>. In dieser Methode wird die <code>both</code>-Menge derart bef\u00fcllt, dass <code>both</code> einer Vereinigung der Mengen <code>numbers1</code> und <code>numbers2</code> entspricht. F\u00fcr Methoden auf Mengen siehe z.B. https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Set.html.</li> <li>Erstellen Sie eine Objektmethode <code>fillBothIntersection()</code>. In dieser Methode wird die <code>both</code>-Menge derart bef\u00fcllt, dass <code>both</code> einem Schnitt der Mengen <code>numbers1</code> und <code>numbers2</code> entspricht. </li> <li>Erstellen Sie eine Objektmethode <code>fillBothDifference()</code>. In dieser Methode wird die <code>both</code>-Menge derart bef\u00fcllt, dass <code>both</code> der Differenz der Menge <code>numbers1</code> minus der Menge <code>numbers2</code> entspricht. </li> <li>Schreiben Sie eine Methode <code>print()</code> so, dass jede Menge als ein Quadrat (10x10) aus Punkten auf der Konsole erscheint. Es wird ein Punkt gezeichnet, wenn die entsprechende Zahl (die 100 Punkte bilden die Zahlen 0..99 ab) in der Menge enthalten ist und es wird kein Punkt gezeichnet, wenn die Zahl nicht vorhanden ist. (Anstelle von Punkten k\u00f6nnen Sie auch jedes beliebige Zeichen (<code>o, *, #, x, ...</code>) verwenden).  Gestalten Sie die Ausgabe so, dass die drei Mengen <code>numbers1</code>, <code>numbers2</code> und <code>both</code> nebeneinander auf der Konsole erscheinen. </li> <li> <p>Testen Sie alle drei Methoden <code>fillBothUnion()</code>, <code>fillBothIntersection()</code> und <code>fillBothDifference()</code>. Die Ausgabe k\u00f6nnte wie folgt sein (<code>A</code> stellt die Menge <code>numbers1</code> dar, <code>B</code> die Menge <code>numbers2</code> und rechts ist jeweils die <code>both</code>-Menge dargestellt): </p> <p></p> <p></p> <p></p> </li> </ol> <p>Tipps: </p> <ul> <li>F\u00fcr die schwarzen Punkte habe ich das Character <code>'\\u25cf'</code> verwendet (ein passendes Leerzeichen dazu ist <code>'\\u2009'</code>). Das Zeichen f\u00fcr die Vereinigung ist <code>'\\u222a'</code> und f\u00fcr den Schnitt <code>'\\u2229'</code>. </li> <li>Schauen Sie sich auch im Skript Mengenoperationen an. </li> </ul>"},{"location":"collections/","title":"Collections","text":"<p>Diese Vorlesung (5.5.2023) findet nicht in Pr\u00e4senz statt! Arbeiten Sie diese Abschnitte</p> <ul> <li>Mengen und</li> <li>Listen</li> </ul> <p>selbst\u00e4ndig durch. Hier auch noch ein Video zu diesem Thema:</p> Video zu Mengen und Listen <p></p> Quellcode aus dem Video ListenUndMengen.java <pre><code>package vorlesungen.listenmengen;\n\nimport java.util.*;\n\n/*\n * Collections: aehnlich wie Arrays, viele Elemente speichern\n * keine feste Laenge\n * wir koennen nur Referenztypen speichern (also nicht int, boolean, char, double, ...)\n * Elemente verschiedenen Typs speicherbar --&gt; gar nicht gut, deshalb Typisieren\n * Arten von Collections: List (wie Arrays), Set (keine Doppelungen), Stack, Queue\n * Map (2-spaltige Tabellen Schl\u00fcssel-/Werte-Paare)\n */\npublic class ListenUndMengen {\n\npublic static void main(String[] args) {\n\nSystem.out.printf(\"%n%n-------------- Listen ------------------%n%n\");\nSet&lt;String&gt; set1 = new HashSet&lt;&gt;();\nSet&lt;String&gt; set2 = new TreeSet&lt;&gt;();\n\nString s1 = \"erster\";\nString s2 = \"zweiter\";\nString s3 = \"dritter\";\nString s4 = \"zweiter\";\n\nInteger i1 = 1;\n\nSystem.out.println(set1.add(s1));\nSystem.out.println(set1.add(s2));\nSystem.out.println(set1.add(s3));\nSystem.out.println(set1.add(s4));\n// System.out.println(set1.add(i1));\n\nSystem.out.println(set1.size());\n\nIterator&lt;String&gt; it = set1.iterator();\nwhile(it.hasNext())\n{\nSystem.out.println(it.next());\n}\n\nSystem.out.println();\n\nfor(String element : set1)\n{\nSystem.out.println(element);\n}\n\nSystem.out.println(set1.remove(\"erster\"));\nSystem.out.println(set1.remove(\"vierter\"));\n\nSystem.out.println();\n\nfor(String element : set1)\n{\nSystem.out.println(element);\n}\n\nSystem.out.printf(\"%n%n-------------- Listen ------------------%n%n\");\n\nList&lt;String&gt; l1 = new ArrayList&lt;&gt;();\nList&lt;String&gt; l2 = new LinkedList&lt;&gt;();\n\nl1.add(s1);\nl1.add(s2);\nl1.add(s3);\nl1.add(s4);\n\nfor(String s : l1)\n{\nSystem.out.println(s);\n}\n\nSystem.out.println(l1.size());\n\nSystem.out.println(l1.remove(\"zweiter\"));\nSystem.out.println(l1.remove(\"vierter\"));\n\n\nfor(String s : l1)\n{\nSystem.out.println(s);\n}\nSystem.out.println();\nSystem.out.println(\"geloescht : \" + l1.remove(1));\n\nfor(String s : l1)\n{\nSystem.out.println(s);\n}\n\nSystem.out.println();\n\nl2.add(\"neu\");\nl2.add(\"alt\");\n\nfor(String s : l2)\n{\nSystem.out.println(s);\n}\n\nSystem.out.println();\n\nl1.addAll(l2);\n\nfor(String s : l1)\n{\nSystem.out.println(s);\n}\n\n\nSystem.out.println();\n\n\nl1.removeAll(l2);\n\nfor(String s : l1)\n{\nSystem.out.println(s);\n}\n}\n\n}\n</code></pre> <p>Das Thema Mengenoperationen ist au\u00dferdem f\u00fcr Aufgabe 4 n\u00fctzlich! Stack und Queue sind nur f\u00fcr weiteres Interesse.</p> <p>Um mehrere Werte oder Referenzen gleichen Typs zu speichern, haben wir bisher Arrays verwendet. Die L\u00e4nge von Arrays wird bei der Initialisierung festgelegt und l\u00e4sst sich dann nicht mehr ver\u00e4ndern. Wenn ein weiteres Element einem vollen Array hinzugef\u00fcgt werden soll, muss zun\u00e4chst ein neues Array erstellt werden, das l\u00e4nger ist als das alte und dann m\u00fcssen alle Elemente aus dem alten Array in das neue Array kopiert werden, ehe das neue Element hinzugef\u00fcgt wird. Das ist recht aufwendig. Dar\u00fcber hinaus ist es beispielsweise auch aufwendig, in Arrays Doppelungen zu vermeiden. F\u00fcr ein Element, das in ein Array eingef\u00fcgt werden soll, muss daf\u00fcr zun\u00e4chst gepr\u00fcft werden, ob es nicht bereits im Array enthalten ist. Diese Nachteile f\u00fchren dazu, dass wir uns nun mit Datenstrukturen besch\u00e4ftigen, die ebenfalls mehrere Elemente speichern k\u00f6nnen, deren Verwaltung aber nicht so aufwendig ist, wie bei Arrays. Diese Datenstrukturen hei\u00dfen Collections. </p> <p>Collections haben drei wesentliche Eigenschaften:</p> <ul> <li>Eine Collection hat keine festgelegte L\u00e4nge, d.h. es sind beliebig viele Elemente in einer Collection speicherbar.</li> <li>In eine Collection k\u00f6nnen nur Elemente von Referenztypen gespeichert werden, d.h. keine Wertetypen (<code>int</code>, <code>double</code>, <code>boolean</code>, <code>char</code>, ...). Um auch solche \"Werte\" speichern zu k\u00f6nnen, werden wir Wrapper-Klassen kennenlernen. </li> <li>Im Gegensatz zu Arrays k\u00f6nnen in einer Collection Elemente verschiedener Referenztypen gespeichert werden. Das ist aber eher ein Problem und kein Feature. Wir werden das vermeiden, da die Verwaltung von Elementen verschiedener Typen fehleranf\u00e4llig ist. Wir werden Collections typisieren, damit sie nur Elemente eines Typs speichern kann.</li> </ul>"},{"location":"collections/#arten-von-collections","title":"Arten von Collections","text":"<p>Es gibt unterschiedliche Arten von Collections, welche je nach Einsatzzweck verwendet werden:</p>  Typ  \u00a0Struktur  \u00a0Zugriff   Eigenschaften  <code>List</code>  Menge   wahlfrei (indexbasiert)  Iterator  kann Elemente mehrfach enthalten  <code>Set</code>  Menge   Iterator   keine doppelten Elemente  keine Ordnung der Elemente  <code>Map</code>  Schl\u00fcssel-Werte-Paare   schl\u00fcsselbasiert  Schl\u00fcssel ist eindeutig  Werte k\u00f6nnen mehrfach sein  <code>Stack</code>  Stapel/Stack   oberstes Element  last-in-first-out-Prinzip  <code>Queue</code>  Warteschlange   erstes und letztes Element   first-in-first-out-Prinzip  <p>Wir werden uns in diesem Semester aber nur mit den Collections <code>List</code>, <code>Set</code> und <code>Map</code> besch\u00e4ftigen. Das Prinzip eines Stacks haben wir bereits kennengelernt, als wir uns \u00fcber den Methodenstack in Programmierung 1 unterhalten hatten. Ein Stack ist ein Stapel, auf den man ein Element legen kann (<code>pop</code>) und von dem man das oberste Element entfernen kann (<code>pop</code>). Mithilfe von <code>top</code> erh\u00e4lt man lesenden Zugriff auf das oberste Element. Auf alle anderen Elemente hat man im Stack keinen Zugriff. </p> <p>Eine Queue implementiert das Prinzip einer Warteschlange. Ein Element kann an das Ende einer Warteschlange angeh\u00e4ngt werden. Herausgenommen werden kann aber immer nur das Element am Anfang (dem head) der Warteschlange. </p> <p>Eine Liste (<code>List</code>) ist noch am ehesten vergleichbar mit einem Array, au\u00dfer dass es keine Gr\u00f6\u00dfenbeschr\u00e4nkung gibt und dass nur Referenztypen in eine Liste gespeichert werden. In Listen werden ebenfalls Indizes verwaltet, so dass man auf die Elemente Zugriff wie in einem Array hat. Es gibt Listen, die automatisch sortiert werden. In Listen k\u00f6nnen Elemente doppelt vorkommen. Von Doppelungen in Collections wird gesprochen, wenn f\u00fcr zwei Elemente <code>e1</code> und <code>e2</code> gilt <code>e1.equals(e2) == true</code> (oder <code>e1.hashCode() == e2.hashCode()</code>). </p> <p>Eine Menge (<code>Set</code>) hat die besondere Eigenschaft, dass sie keine Doppelungen enth\u00e4lt. Wird versucht, ein Element einer Menge hinzuzuf\u00fcgen, welches bereits in der Menge enthalten ist, dann wird das Element nicht hinzugef\u00fcgt. Deshalb gibt die <code>add(element)</code>-Methode f\u00fcr eine Menge ein <code>boolean</code> zur\u00fcck, damit erkannt werden kann, ob das Element hinzugef\u00fcgt wurde (<code>true</code>) oder nicht (<code>false</code>). </p> <p>Eine <code>Map</code> kann man sich wie eine Tablle aus zwei Spalten vorstellen. In der linken Spalte stehen Schl\u00fcssel <code>key</code> und in der rechten die Werte <code>value</code>. Jedem Schl\u00fcssel ist genau ein Wert zugeordnet. Jeder Schl\u00fcssel ist eindeutig, d.h. es gibt keine Doppelungen unter den Schl\u00fcsseln (die Schl\u00fcssel in einer <code>Map</code> sind eine <code>Set</code>). Werte k\u00f6nnen allerdings doppelt vorkommen (haben aber jeweils einen eigenen Schl\u00fcssel). </p> <p>Eine kurze Entscheidungshilfe, welche Collection verwendet wird, zeigt die folgende Abbildung:</p> <p></p>"},{"location":"collections/#der-collection-klassenbaum","title":"Der Collection-Klassenbaum","text":"<p>Leider ist die Verwaltung von Collections in Java nicht einheitlich. Das liegt daran, dass (unverst\u00e4ndlicherweise) Listen und Mengen in einer anderen Vererbungshierarchie verwaltet werden, als Maps. Wir schauen uns die Vererbungshierarchie von <code>Collection</code> einaml an. Darin kommen die Listen und Mengen vor, aber nicht Maps.</p> <p></p> <p>Die \"Mutter-Klasse\" der Collections <code>List</code> und <code>Set</code> ist <code>Collection</code>. In der Abbildung fallen unterschiedliche Farben auf. Die gr\u00fcngef\u00e4rbten Klassen sind sogenannte Interfaces. Interfaces lernen wir sp\u00e4ter noch kennen. Ebenso wie die rotgef\u00e4rbten Klassen, bei denen es sich um abstrakte Klassen handelt. Das soll uns zun\u00e4chst nicht besonders interessieren, aber wir k\u00f6nnen uns merken, dass wir die gr\u00fcngef\u00e4rbten Klassen als Typen verwenden (insb. den Typ <code>List</code> f\u00fcr die Listen und den Typ <code>Set</code> f\u00fcr die Mengen). Wir k\u00f6nnen aber keine konkreten <code>List</code>-Objekte bzw. keine konkreten <code>Set</code>-Objekte erzeugen. Das geht nur mit dem blaugef\u00e4rbten Klassen. Das bedeutet, dass wir z.B. ein konkretes <code>ArrayList</code>-Objekt erzeugen werden oder ein konkretes <code>HashSet</code>-Objekt. Hier einige Beispiele:</p> <pre><code>import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.TreeSet;\n\npublic class Collections {\n\npublic static void main(String[] args) {\nList l1 = new ArrayList();\nList l2 = new LinkedList();\n\nSet s1 = new HashSet();\nSet s2 = new TreeSet();\n}\n}\n</code></pre> <p>Beachten Sie, alle Klassen aus dem <code>java.util</code>-Paket zu importieren! Eine Klasse <code>List</code> gibt es z.B. auch im <code>java.awt</code>-Paket! Statt alle Klassen einzeln zu importieren k\u00f6nnen Sie auch schreiben:</p> <pre><code>import java.util.*;\n</code></pre> <p>Der <code>*</code> ist eine Wildcard und importiert alle Klassen aus <code>java.util</code>. </p> <p>Zur Diskussion, wann <code>ArrayList</code> besser ist und wann <code>LinkedList</code>, siehe hier. Eine Diskussion \u00fcber die Unterschiede zwischen <code>HashSet</code> und <code>TreeSet</code> finden Sie z.B. hier. Wir werden f\u00fcr Listen haupts\u00e4chlich Objekte von <code>ArrayList</code> erstellen und f\u00fcr Mengen haupts\u00e4chlich Objekte von <code>HashSet</code>.</p>"},{"location":"collections/#mengen-sets","title":"Mengen - Sets","text":"<p>Wir betrachten zun\u00e4chst Mengen genauer und beginnen mit einem Beispiel:</p> <pre><code>import java.util.*;\n\npublic class Collections {\n\npublic static void main(String[] args) {\n\nSet menge = new HashSet();\n\nString s1 = \"erster\";\nString s2 = \"zweiter\";\nString s3 = \"dritter\";\nString s4 = \"zweiter\";\n\nSystem.out.println(menge.add(s1)); // true\nSystem.out.println(menge.add(s2)); // true\nSystem.out.println(menge.add(s3)); // true\nSystem.out.println(menge.add(s4)); // false\n\nSystem.out.println(menge.size()); // 3\n\nIterator it = menge.iterator();\nwhile(it.hasNext())\n{\nSystem.out.println(it.next());\n} }\n}\n</code></pre> <p>In Zeile <code>1</code> werden zun\u00e4chst alle verwendeten Klassen aus dem <code>java.util</code>-Paket geladen. Das sind f\u00fcr unser Beispiel <code>Set</code>, <code>HashSet</code> und <code>Iterator</code>. Die <code>Iterator</code>-Klasse wird verwendet, um durch unsere Menge <code>menge</code> zu laufen. Wir werden auf den <code>Iterator</code> gleich genauer eingehen, lernen aber bald eine einfachere L\u00f6sung kennen, um durch unsere Menge zu iterieren. </p> <p>In Zeile <code>7</code> wird die Menge <code>menge</code> erzeugt. Wir deklarieren daf\u00fcr den Typ <code>Set</code> und erzeugen unter Verwendung des parameterlosen Konstruktors von <code>HashSet</code> ein <code>HashSet</code>-Objekt. Die <code>menge</code> hat also den Compilertyp <code>Set</code> und mindestens den Laufzeittyp <code>HashSet</code> (nat\u00fcrlich noch weitere Laufzeittypen, z.B. <code>Object</code>). </p> <p>In den Zeilen <code>14-17</code> werden der <code>menge</code> Elemente hinzugef\u00fcgt. Diese Elemente sind hier vom Typ <code>String</code>. Das Hinzuf\u00fcgen von Elementen zu einer Menge erfolgt mit der Methode <code>add(element)</code>. Diese Methode gibt ein <code>boolean</code> zur\u00fcck. Wir lassen in den Zeilen <code>14-17</code> diese R\u00fcckgabe auf die Konsole ausgeben und stellen fest, dass wir folgende Ausgaben erhalten: </p> <pre><code>true\ntrue\ntrue\nfalse\n</code></pre> <p>Die <code>add()</code>-Methode gibt also 3x ein <code>true</code> zur\u00fcck und beim vierten Aufruf ein <code>false</code>. Das liegt daran, dass beim vierten Aufruf von <code>add()</code> (Zeile <code>17</code>) das \u00fcbergebene Element <code>s4</code> nicht in die Menge <code>menge</code> eingef\u00fcgt wird, da sich in dieser Menge bereits ein <code>String</code> mit dem Wert <code>\"zweiter\"</code> befindet und eine Menge keine Doppelungen enthalten darf. Da <code>s2.equals(s4)</code> den Wert <code>true</code> zur\u00fcckgibt, erkennt die <code>add()</code>-Methode, dass bereits ein gleiches Objekt in der Menge enthalten ist und <code>s4</code> wird deshalb nicht eingef\u00fcgt. </p> <p>In Zeile <code>19</code> lassen wir uns die Anzahl der Elemente in der Menge <code>menge</code> ausgeben. Dies erfolgt mithilfe der <code>size()</code>-Methode (in Collections ist es also nicht <code>length()</code>, auch nicht <code>length</code> und auch nicht <code>getLength()</code> oder <code>getSize()</code>, sondern <code>size()</code>). Der Wert von <code>size()</code> in unserem Beispiel ist <code>3</code>. </p>"},{"location":"collections/#der-iterator","title":"Der Iterator","text":"<p>Mithilfe der Klasse Iterator iterieren wir durch eine Collection, d.h. wir laufen durch unsere Collection und betrachten alle Elemente aus der Collection. </p> <p>Die Klasse <code>Iterator</code> besitzt drei Objektmethoden (eigentlich vier, aber die vierte Methode soll uns zun\u00e4chst nicht interessieren):</p> <ul> <li><code>hasNext()</code>: liefert ein <code>true</code> zur\u00fcck, wenn sich mindestens ein weiteres Element in der Collection befindet; wenn nicht, dann <code>false</code>,</li> <li><code>next()</code>: liefert das n\u00e4chste Element aus der Iteration zur\u00fcck (und entfernt es daraus), </li> <li><code>remove()</code>: l\u00f6scht das mit <code>next()</code>zur\u00fcckgegebene Element.</li> </ul> <p>In Zeile <code>21</code> erzeugen wir zun\u00e4chst mit der <code>iterator()</code>-Methode aus <code>Set</code> ein Objekt von <code>Iterator</code>. Die Referenz auf dieses Objekt nennen wir hier <code>it</code>. </p> <p>Die <code>while()</code>-Schleife in den Zeilen <code>22-25</code> durchl\u00e4uft nun diese Iteration, indem sie mithilfe von <code>hasNext()</code> pr\u00fcft, ob sich noch ein weiteres Element in der Iteration befindet und wenn ja, dann wird es mithilfe von <code>next()</code> aus der Iteration entnommen und in Zeile <code>24</code> auf die Konsole ausgegeben. </p> <p>Wir erhalten f\u00fcr unser Beispiel folgende Ausgaben:</p> <pre><code>zweiter\ndritter\nerster\n</code></pre> <p>Darin sehen wir auch, dass die Reihenfolge des Einf\u00fcgens in eine Menge nicht gewahrt wird. Wir haben die Elemente in der Reihenfolge <code>\"erster\"</code>, <code>\"zweiter\"</code>, <code>\"dritter\"</code> in die Menge eingef\u00fcgt, aber die Ausgabe erfolgt in der Reihenfolge <code>\"zweiter\"</code>, <code>\"dritter\"</code>, <code>\"erster\"</code>. Auf die Reihenfolge haben wir in Mengen keinen Einfluss!</p>"},{"location":"collections/#methoden-fur-mengen","title":"Methoden f\u00fcr Mengen","text":"<p>Wir haben bereits drei Methoden f\u00fcr Mengen kennengelernt: <code>add()</code>, <code>size()</code> und <code>iterator()</code>. Tats\u00e4chlich sind das Methoden, die in allen Klassen zur Verf\u00fcgung stehen, die von <code>java.util.Collection</code> erben (erben ist hier eigentlich nicht ganz richtig, da es sich bei <code>java.util.Collection</code> um ein Interface handelt, aber das soll uns hier zun\u00e4chst egal sein). Wir betrachten nun alle wesentlichen Methoden, die wir f\u00fcr Mengen und Listen zur Verf\u00fcgung haben (siehe dazu auch die Java-Dokumentation von Collection):</p>  Methode   Beschreibung  <code>boolean add(E element)</code>  F\u00fcgt Element <code>element</code> in die Collection ein. Gibt <code>true</code> zur\u00fcck, wenn Element hinzugef\u00fcgt wurde sonst <code>false</code>.  <code>boolean addAll(Collection c)</code>  F\u00fcgt alle Elemente der Collection <code>c</code> in die Collection ein. Gibt <code>true</code> zur\u00fcck, wenn mindestens ein Element hinzugef\u00fcgt wurde sonst <code>false</code>.  <code>void clear()</code>  Entfernt alle Elemente aus der Collection. <code>boolean contains(E element)</code>  Gibt <code>true</code> zur\u00fcck, wenn sich <code>element</code> in der Collection befindet, sonst <code>false</code>. <code>boolean containsAll(Collection c)</code>  Gibt <code>true</code> zur\u00fcck, wenn sich alle Elemente der Collection <code>c</code> in der Collection befinden, sonst <code>false</code>. <code>boolean isEmpty()</code>  Gibt <code>true</code> zur\u00fcck, wenn sich keine Elemente in der Collection befinden, sonst <code>false</code>. <code>Iterator iterator()  Erzeugt einen Iterator, welcher auf das erste Element der Collection zeigt. <code>boolean remove(Object o)</code>  Entfernt <code>o</code> aus der Collection und gibt <code>true</code> zur\u00fcck, wenn ein Element entfernt wurde, sonst <code>false</code>. <code>boolean removeAll(Collection c)</code>  Entfernt alle Elemente aus c aus der Collection und gibt <code>true</code> zur\u00fcck, wenn mindestens ein Element entfernt wurde, sonst <code>false</code>. <code>int size()</code>  Gibt die Anzahl der Elemente in der Collection zur\u00fcck. <code>Object[] toArray()</code>  Gibt die Elemente in der Collection in einem Array-Datentyp zur\u00fcck. <p>Der TyP <code>E</code> in der Tabelle ist ein Platzhalter f\u00fcr einen konkreten Typ. Bei dem <code>Iterator</code> sehen wir eine neue Syntax <code>&lt;E&gt;</code>. Diese lernen wir gleich kennen. <code>E</code> steht, wie gesagt, f\u00fcr einen beliebigen Typ. Die Typisierung wollen wir zun\u00e4chst motivieren. </p>"},{"location":"collections/#typisieren","title":"Typisieren","text":"<p>Generell k\u00f6nnen in Collections Objekte verschiedener Typen gespeichert werden. Es w\u00e4re also m\u00f6glich, so etwas hier zu tun:</p> <pre><code>    Set menge = new HashSet();\nmenge.add(new String(\"erster\"));        // String einf\u00fcgen\nmenge.add(new Power(2,4));              // Power einf\u00fcgen\nmenge.add(new Point(2,3));              // Point einf\u00fcgen\nmenge.add(new Konto());                 // Konto einf\u00fcgen\n</code></pre> <p>Das Speichern von Objekten verschiedenen Typs ist jedoch sehr fehleranf\u00e4llig und sollte unbedingt vermieden werden! Es gibt auch nicht wirklich sinnvollen Anwendungsbeispiele daf\u00fcr. </p> <p>Stattdessen wollen wir angeben, welcher Typ die Objekte haben sollen, die in unserer Collection gespeichert werden k\u00f6nnen. Dazu typisieren wir die Collection. </p> <p>Das Typisieren einer Collection erfolgt mithilfe der Diamond-Syntax:  <code>Collection&lt;Typ&gt; name = new KonkreteKlasse&lt;&gt;();</code></p> <p>Wir typisieren die Menge <code>menge</code> aus dem eben gezeigten Beispiel:</p> <pre><code>    Set&lt;String&gt; menge = new HashSet&lt;&gt;();    // mit String typisiert - menge nimmt nur Strings auf\nmenge.add(new String(\"erster\"));        // String einf\u00fcgen\nmenge.add(new Power(2,4));              // Fehler - kein String\nmenge.add(new Point(2,3));              // Fehler - kein String\nmenge.add(new Konto());                 // Fehler - kein String\n</code></pre> <p>Wir haben <code>menge</code> typisiert und angegeben, dass <code>menge</code> nur Objekte vonm Typ <code>String</code> aufnehmen kann. Dazu geben wir bei der Typdeklaration <code>Set&lt;String&gt;</code> den Elemente-Typ in spitzen Klammern an. Diese spitzen Klammern werden auch in den Konstruktoraufruf eingef\u00fcgt <code>new HashSet&lt;&gt;();</code>. Darin muss der Typ aber nicht wiederholt werden (der ist ja aus der Deklaration klar). </p> <p>Der Versuch, Objekte eines anderen Typs als <code>String</code> in die Collection einzuf\u00fcgen, scheitert bereits zur Compilezeit, d.h. das Programm l\u00e4sst sich gar nicht \u00fcbersetzen, wenn versucht wird, Objekte anderen Typs als der bei der Typisierung Angegebene einzuf\u00fcgen. </p> <p>Unser einf\u00fchrendes Beispiel von oben ist deshalb besser mit Typisierung: </p> <pre><code>import java.util.*;\n\npublic class Collections {\n\npublic static void main(String[] args) {\n\nSet&lt;String&gt; menge = new HashSet&lt;&gt;();\n\nString s1 = \"erster\";\nString s2 = \"zweiter\";\nString s3 = \"dritter\";\nString s4 = \"zweiter\";\n\nSystem.out.println(menge.add(s1)); // true\nSystem.out.println(menge.add(s2)); // true\nSystem.out.println(menge.add(s3)); // true\nSystem.out.println(menge.add(s4)); // false\n\nSystem.out.println(menge.size()); // 3\n\nIterator&lt;String&gt; it = menge.iterator();\nwhile(it.hasNext())\n{\nSystem.out.println(it.next());\n} }\n}\n</code></pre> <p>Beachten Sie, dass auch der Iterator (Zeile <code>21</code>) typisiert wird.</p>"},{"location":"collections/#die-for-each-schleife","title":"Die for-each-Schleife","text":"<p>Wenn wir unsere Collection typisieren, haben wir auch eine einfachere M\u00f6glichkeit, durch diese zu laufen als die Verwednung des Iterators. Wir k\u00f6nnen stattdessen die for-each-Schleife verwenden. Die allgemeine Syntaxh einer solchen Schleife ist:</p> <pre><code>for(TypElement element : collection)\n{\n\n}\n</code></pre> <p>F\u00fcr unser Beispiel k\u00f6nnten wir den Iterator ersetzen durch diese Schleife:</p> <pre><code>import java.util.*;\n\npublic class Collections {\n\npublic static void main(String[] args) {\n\nSet&lt;String&gt; menge = new HashSet&lt;&gt;();\n\nString s1 = \"erster\";\nString s2 = \"zweiter\";\nString s3 = \"dritter\";\nString s4 = \"zweiter\";\n\nSystem.out.println(menge.add(s1)); // true\nSystem.out.println(menge.add(s2)); // true\nSystem.out.println(menge.add(s3)); // true\nSystem.out.println(menge.add(s4)); // false\n\nSystem.out.println(menge.size()); // 3\n\nfor(String s : menge)\n{\nSystem.out.println(s);\n}\n}\n}\n</code></pre> <p>\u00dcbrigens: anstelle der Collection (hier: <code>menge</code>) k\u00f6nnte auch ein Array stehen. Wenn Sie also vollst\u00e4ndig durch Array laufen m\u00f6chten, m\u00fcssen Sie das nicht zwingend \u00fcber alle Indizes machen, sondern k\u00f6nnen daf\u00fcr auch diese for-each-Schleife verwenden. </p> \u00dcbung <p>Ersetzen Sie im oberen Beispiel <code>HashSet</code> durch <code>TreeSet</code>. Erkennen Sie einen Unterschied?</p>"},{"location":"collections/#listen","title":"Listen","text":"<p>Der Umgang mit Listen ist \u00e4hnlich dem Umgang mit Mengen, da beide von <code>java.util.Collection</code> abgeleitet sind. Deshalb stehen uns f\u00fcr Listen die gleichen Methoden zur Verf\u00fcgung, wie f\u00fcr Mengen. Listen k\u00f6nnen wir uns eher wie Arrays vorstellen. In Listen gibt es, im Unterschied zu Mengen, index-basierte Zugriffe und auch Doppelungen. Wir betrachten ein Beispiel:</p> <pre><code>import java.util.*;\n\npublic class Collections {\n\nstatic void fillList(List&lt;String&gt; list) {\nfor (int i = 0; i &lt; 10; i++) { list.add(String.valueOf(i)); }\n}\n\nstatic void printList(List&lt;String&gt; list) {\nIterator&lt;String&gt; it = list.iterator();\nwhile(it.hasNext()) {\nSystem.out.print(it.next() + \" \");\n}\nSystem.out.println();\nSystem.out.println(\"End of list\");\n}\n\npublic static void main(String[] args)\n{\nList&lt;String&gt; list1 = new ArrayList&lt;&gt;();\nfillList(list1);\nprintList(list1);\n\nList&lt;String&gt; list2 = new LinkedList&lt;&gt;();\nfillList(list2);\nlist2.remove(\"3\");      // Wert!\nlist2.remove(6);        // Index!\nlist1.removeAll(list2);\nprintList(list2);       // 0 1 2 4 5 6 8 9\nprintList(list1);       // 3 7\n}\n\n}\n</code></pre> <p>Wir erstellen uns zwei Listen <code>list1</code> (Zeile <code>26</code>) und <code>list2</code> (Zeile <code>30</code>). Beide sind vom Compilertyp List und beide sind typisiert mit <code>String</code>, d.h. sie k\u00f6nnen nur Strings aufnehmen. </p> <p>Die Methode <code>fillList()</code> (Zeilen <code>5-11</code>) bef\u00fcllt die \u00fcbergebene Liste mit den Ziffern <code>0...9</code>. Da die Liste Strings erwartet, werden die <code>int</code>-Ziffern mithilfe von <code>String.valueOf()</code> in einen <code>String</code> umgewandelt (Zeile <code>9</code>). Die <code>add()</code>-Methode f\u00fcgt die Strings hinzu (Zeile <code>9</code>).  </p> <p>Die Methode <code>printList()</code> (Zeilen <code>13-33</code>) gibt die Elemente der \u00fcbergebenen Liste mithilfe des Iterators aus. Es wird jede Ziffer ausgegeben, gefolgt von einem Leerzeichen (Zeile <code>18</code>). </p> <p>Der Aufruf von <code>printList(list1);</code> in Zeile <code>28</code> f\u00fchrt zu folgender Ausgabe:</p> <pre><code>0 1 2 3 4 5 6 7 8 9 \nEnd of list\n</code></pre> <p>Die Liste <code>list2</code> wird zun\u00e4chst ebenfalls mit den Ziffern <code>0...9</code> (jeweils als <code>String</code>) bef\u00fcllt. Die Anweisung <code>list2.remove(\"3\");</code> in Zeile <code>32</code> bewirkt, dass der Wert <code>\"3\"</code> aus der Liste gel\u00f6scht wird. Nach diesem L\u00f6schen enth\u00e4lt die Liste <code>list2</code> noch folgende Werte:</p> <pre><code>\"0\" \"1\" \"2\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" </code></pre> <p>In Zeile <code>33</code> wird nun das Element aus der Liste gel\u00f6scht, das unter dem Index <code>6</code> gespeichert ist. Das ist das Element <code>\"7\"</code>. Nach dem L\u00f6schen des Elementes enth\u00e4lt die Liste <code>list2</code> noch folgende Werte:</p> <pre><code>\"0\" \"1\" \"2\" \"4\" \"5\" \"6\" \"8\" \"9\" </code></pre> <p>Die Anweisung <code>list1.removeAll(list2);</code> in Zeile <code>34</code> bewirkt nun, dass aus <code>list1</code> alle Werte gel\u00f6scht werden, die (auch) in <code>list2</code> enthalten sind, also <code>\"0\" \"1\" \"2\" \"4\" \"5\" \"6\" \"8\" \"9\"</code>. Das bewirkt, dass in <code>list1</code> dann nur noch die Werte <code>\"3\" \"7\"</code> \u00fcbrig bleiben. </p> <p>Die Anweisung <code>printList(list2);</code> in Zeile <code>35</code> bewirkt folgende Ausgabe: </p> <pre><code>0 1 2 4 5 6 8 9 \nEnd of list\n</code></pre> <p>Die Anweisung <code>printList(list1);</code> in Zeile <code>36</code> bewirkt folgende Ausgabe: </p> <pre><code>3 7 \nEnd of list\n</code></pre> <p>Die Methode <code>printList()</code> h\u00e4tte anstelle den Iterator zu verwenden auch mit der for-each-Schleife implementiert werden k\u00f6nnen:</p> <pre><code>    static void printList(List&lt;String&gt; list) {\nfor(String s : list)\n{\nSystem.out.print(s + \" \");\n}\nSystem.out.println();\nSystem.out.println(\"End of list\");\n}\n</code></pre> \u00dcbung <p>Gegeben ist folgender Code: <pre><code>  Set&lt;Integer&gt; s1 = new HashSet&lt;&gt;();\nSet&lt;Integer&gt; s2 = new HashSet&lt;&gt;();\n\nfor (int i = 10; i &gt;= 1; i--) { s1.add(i); }\nfor (int i = 9; i &lt;= 12; i++) { s2.add(i); }\u000bs1.addAll(s2); \u00a0 </code></pre></p> <ol> <li>Was ist der R\u00fcckgabewert von <code>s1.addAll(s2);</code> und warum?</li> <li>Implementieren Sie die Ausgabe aller Werte von <code>s1</code> und <code>s2</code>. </li> </ol>"},{"location":"collections/#mengenoperationen","title":"Mengenoperationen","text":"<p>Angenommen, wir haben drei Mengen <code>A</code>, <code>B</code> und <code>C</code>, wobei alle Elemente aus <code>C</code> auch Elemente in <code>A</code> sind. Mithilfe der Methoden <code>addAll()</code>, <code>removeAll()</code>, <code>retainAll()</code>  und <code>containsAll()</code> lassen sich Operationen \u00fcber Mengen beschreiben, wie die folgende Abbildung zeigt:</p> <p></p>"},{"location":"collections/#stack-und-queue","title":"Stack und Queue","text":"<p>Wir werden uns, wie bereits erw\u00e4hnt, nicht ausf\u00fcrhlich mit Stack und Queue besch\u00e4ftigen, wollen aber hier der Vollst\u00e4ndigkeit halber, die gesonderten Methoden angeben, die diese beiden Arten von Collections betreffen:</p>"},{"location":"collections/#stack","title":"Stack","text":"<ul> <li>Last-In-First-Out-Prinzip</li> <li><code>push(E element)</code> zum Hinzuf\u00fcgen</li> <li><code>pop()</code> entfernt oberstes Element und gibt es zur\u00fcck</li> <li><code>empty()</code> pr\u00fcft, ob der Stack leer ist</li> </ul>"},{"location":"collections/#queue","title":"Queue","text":"<ul> <li>First-In-First-Out-Prinzip</li> <li><code>add()/offer()</code> zum Hinzuf\u00fcgen</li> <li><code>remove()/poll()</code> entfernt vorderstes Element und gibt es zur\u00fcck</li> <li><code>element()/peek()</code> pr\u00fcft, ob die Warteschlange leer ist</li> </ul>"},{"location":"collections/#wertetypen-in-collections","title":"Wertetypen in Collections","text":"<p>Wertetypen k\u00f6nnen nicht als Typen der Elemente in Collections verwendet werden. Es sind nur Referenztypen in Collections erlaubt. F\u00fcr alle Wertetypen stehen entsprechende Wrapper-Klassen zur Verf\u00fcgung: <code>Integer</code>, <code>Double</code>, <code>Float</code>, <code>Short</code>, <code>Byte</code>, <code>Long</code>, <code>Character</code>, <code>Boolean</code>:</p> <pre><code>// Wertetypen k\u00f6nnen nicht als konkrete\u00a0\n// Typen in Collections verwendet werden\nList&lt;int&gt; l = new ArrayList&lt;&gt;();    // Fehler !!\n\n// Verwendung der Wrapper-Klassen + Auto-Boxing\nList&lt;Integer&gt; l = new ArrayList&lt;&gt;();\n\nl.add(100);\u00a0 \u00a0 \u00a0 \u00a0 // sogenanntes Auto-Boxing\n</code></pre> <p>Das obere beispiel zeigt in Zeile <code>3</code>, wie es nicht geht. Die <code>List l</code> kann nicht mit <code>int</code> typisiert werden. Stattdessen muss die Wrapper-Klasse <code>Integer</code> verwendet werden. Wir betrachten Wrapper-Klassen im n\u00e4chsten Abschnitt.</p>"},{"location":"einstieg/","title":"Einstieg","text":"<p>Wir haben bis jetzt noch keine Nutzerinnen-Eingaben erm\u00f6glicht und verwaltet. Das wollen wir nun \u00e4ndern. Es gibt die M\u00f6glichkeit, Nutzerinnen-Eingaben \u00fcber die Konsole zu implementieren. Dazu steht z.B. die Klasse Scanner aus dem <code>java.util</code>-Paket zur Verf\u00fcgung. Diese Klasse wollen wir hier aber nicht betrachten, sondern \u00f6ffnen einen Dialog (ein Fenster), um Eingaben vorzunehmen. Dazu verwenden wir die Klasse JOptionPane. </p> <p>Diese Klasse bietet einige n\u00fctzliche statische Methoden, die uns Dialoge erzeugen. Die Klasse <code>JOptionPane</code> befindet sich im Paket <code>javax.swing</code>. Wenn Sie in Ihrem Java-Projekt eine Datei <code>module-info.java</code> haben, dann m\u00fcssen Sie darin <code>requires java.desktop;</code> eintragen, um \u00fcberhaupt Klassen aus dem <code>javax.swing</code>-Paket importieren zu k\u00f6nnen, das sich das Paket <code>javax.swing</code> im Modul <code>java.desktop</code> befindet:</p> module-info.java <pre><code>module SoSe23   // SoSe23 ist der Name des Java-Projektes\n{\nrequires java.desktop;\n}\n</code></pre> <p>Die interessanten Methoden zur Erzeugung der Dialoge sind</p> <ul> <li><code>showConfirmDialog()</code>,</li> <li><code>showInputDialog()</code>,</li> <li><code>showMessageDialog()</code> und</li> <li><code>showOptionDialog()</code> </li> </ul> <p>Diese Methoden erzeugen jeweils ein Dialogfenster, in dem entweder etwas eingegeben werden kann (<code>showInputDialog()</code>) oder in dem etwas durch den Klick auf einen Button ausgew\u00e4hlt werden kann. Der Eingabe-Dialog gibt einen <code>String</code> zur\u00fcck und die anderen Dialoge geben ein <code>int</code> zur\u00fcck, welcher beschreibt, auf welchen Button geklickt wurde. Der zur\u00fcckgegebene <code>int</code>-Wert l\u00e4sst sich mit den folgenden Konstanten vergleichen:</p> <ul> <li><code>JOptionPane.YES_OPTION</code>,</li> <li><code>JOptionPane.NO_OPTION</code>,</li> <li><code>JOptionPane.CANCEL_OPTION</code>,</li> <li><code>JOptionPane.OK_OPTION</code>,</li> <li><code>JOptionPane.CLOSED_OPTION</code></li> </ul>"},{"location":"einstieg/#beispiel-showconfirmdialog","title":"Beispiel <code>showConfirmDialog()</code>","text":"<p>Die <code>showConfirmDialog()</code>-Methode ist zwei Mal \u00fcberladen. Es gibt </p> <ul> <li><code>static int showConfirmDialog(Component parentComponent, Object message)</code> und </li> <li><code>static int showConfirmDialog(Component parentComponent, Object message, String title, int optionType)</code></li> </ul> <p>Als <code>optionType</code> gibt es dabei die Auswahl zwischen </p> <ul> <li><code>JOptionPane.DEFAULT_OPTION</code>,</li> <li><code>JOptionPane.YES_NO_OPTION</code>,</li> <li><code>JOptionPane.YES_NO_CANCEL_OPTION</code>,</li> <li><code>JOptionPane.OK_CANCEL_OPTION</code></li> </ul> <p>Die <code>parentComponent</code> ist das Fenster, welches das Dialogfenster aufruft. Wir haben ein solches Fenster (noch) nicht, deshalb werden wir zun\u00e4chst den Wert hier stets auf <code>null</code> setzen. </p> <p>Der <code>String</code> <code>message</code> erscheint im Dialogfenster als Nachricht. Da dies nicht nur ein <code>String</code> sein kann, sondern besipielsweise auch ein <code>Icon</code>, ist der Typ von <code>message</code> als <code>Object</code> deklariert.</p> <p>Der <code>String</code> <code>title</code> erscheint als Titel des Dialogfensters. </p>"},{"location":"einstieg/#beispiel-mit-yes_no_option","title":"Beispiel mit <code>YES_NO_OPTION</code>","text":"<pre><code>int auswahl = JOptionPane.showConfirmDialog(\nnull,                           // parentComponent\n\"Wollen Sie wirklich beenden?\", // message\n\"Programmende\",                 // title\nJOptionPane.YES_NO_OPTION       // optionType\n);\n</code></pre> <p>erzeugt z.B. folgendes Dialogfenster:</p> <p></p> <p>Wenn Sie nun auf einen der beiden Button <code>No</code> oder <code>Yes</code> klicken, dann schlie\u00dft sich das Fenster wieder und in dem <code>int</code> <code>auswahl</code> ist der Wert gespeichert, der dem von Ihnen gedr\u00fcckten Button entspricht. Diesen Wert k\u00f6nnen Sie wie folgt auswerten:</p> <pre><code>if(auswahl == JOptionPane.NO_OPTION)\n{\n// es wurde auf NO geklickt\n}\nelse if(auswahl == JOptionPane.YES_OPTION)\n{\n// es wurde auf YES geklickt\n}\n</code></pre>"},{"location":"einstieg/#beispiel-mit-yes_no_cancel_option","title":"Beispiel mit <code>YES_NO_CANCEL_OPTION</code>","text":"<pre><code>int auswahl = JOptionPane.showConfirmDialog(null, \"Weitere Seiten scannen?\", \"Speichern\", JOptionPane.YES_NO_CANCEL_OPTION);\n\nif(auswahl == JOptionPane.NO_OPTION)\n{\n// es wurde auf NO geklickt\n}\nelse if(auswahl == JOptionPane.YES_OPTION)\n{\n// es wurde auf YES geklickt\n}\nelse if(auswahl == JOptionPane.CANCEL_OPTION)\n{\n// es wurde auf CANCEL geklickt\n}\n</code></pre> <p>erzeugt folgendes Dialogfenster:</p> <p></p>"},{"location":"einstieg/#beispiel-showinputdialog","title":"Beispiel <code>showInputDialog()</code>","text":"<p>Die Methode <code>showInputDialog()</code> \u00f6ffnet ein Dialogfenster mit einem einzeiligen Textfeld, in das die Nutzerin etwas eingeben kann und diese Eingabe dann mit dem Klick auf einen Button beendet. Die Methode <code>showInputDialog()</code> ist sechs Mal \u00fcberladen, siehe dazu [hier]. Uns interessiert in den meisten F\u00e4llen die einfachste Form <code>showInputDialog(Object message)</code> oder, wenn wir noch einen <code>messageType</code> hinzuf\u00fcgen wollen, <code>showInputDialog(Component parentComponent, Object message, String title, int messageType)</code>. </p> <p>F\u00fcr den <code>messageType</code> gibt es folgende vordefinierte Konstanten:</p> <ul> <li><code>ERROR_MESSAGE</code>,</li> <li><code>INFORMATION_MESSAGE</code>,</li> <li><code>WARNING_MESSAGE</code>,</li> <li><code>QUESTION_MESSAGE</code>,</li> <li><code>PLAIN_MESSAGE</code></li> </ul> <p>Wichtig ist, dass die <code>showInputDialog()</code>-Methode den <code>String</code> zur\u00fcckgibt, der eingegeben wurde. </p> <pre><code>String eingabe = JOptionPane.showInputDialog(\"Ihre Eingabe : \");\nSystem.out.println(\"Sie haben \" + eingabe + \" eingegeben\");\n</code></pre> <p>erzeugt folgendes Dialogfenster:</p> <p></p> <p>Die Implementierung</p> <pre><code>String eingabe = JOptionPane.showInputDialog(null, \"Ihre Eingabe : \", \"Dialogtitel\", JOptionPane.ERROR_MESSAGE);\nSystem.out.println(\"Sie haben \" + eingabe + \" eingegeben\");\n</code></pre> <p>erzeugt folgendes Dialogfenster:</p> <p></p> <p>Die Ansicht der Fenster und auch der <code>messageType</code>-Icons sind betriebssystemabh\u00e4ngig. </p>"},{"location":"einstieg/#ausblick","title":"Ausblick","text":"<p>Angenommen, wir wollen <code>JOptionPane.showInputDialog()</code> verwenden, um eine Zahl einzugeben. Klar ist, dass <code>showInputDialog()</code> die Eingabe als <code>String</code> zur\u00fcckgibt. </p> <ol> <li> <p>Problem: Wie wandeln wir einen <code>String</code> zu einem <code>int</code> (oder <code>double</code>) um? </p> <p>Antwort: mit der Hilfe von Wrapper-Klassen </p> </li> <li> <p>Problem: Angenommen, wir haben eine L\u00f6sung, <code>String</code> nach <code>int</code> umzuwandeln. Wie stellen wir dann sicher, dass unser Programm nicht abst\u00fcrzt, wenn wir gar keine Zahl eingeben, sondern z.B. <code>hallo</code>? Das l\u00e4sst sich ja gar nicht in eine Zahl umwandeln.</p> <p>Antwort: mit der Behandlung von Exceptions</p> </li> </ol>"},{"location":"enum/","title":"Aufz\u00e4hlungstypen (enum)","text":""},{"location":"enum/#motivation","title":"Motivation","text":"<p>Angenommen, Sie wollen mithilfe einer Variablen eine festgelegte Menge an Zust\u00e4nden beschreiben, z.B.</p> <pre><code>String tag = \"MONTAG\"   // kann auch Werte \"Dienstag\" usw. annehmen\nint tag = 0;            // Magic Number f\u00fcr \"Montag\"\n</code></pre> <p>Das Problem:  - die Variablen k\u00f6nnen auch beliebige andere Werte (aus dem jeweiligen Wertebereich) annehmen, z.B. <code>Tag = \"hallo\"</code> oder <code>Tag=4711</code>, - Magic Numbers sollen vermieden werden \u2192 meistens schlechte Lesbarkeit</p> Beispiel TicTacToe <pre><code>public class TicTacToe {\nint[][] field;\n\nTicTacToe()\n{\nfield = new int[3][3];\nfor(int i=0; i&lt;field.length; i++)\nfor(int j=0; j&lt;field[i].length; j++)\nfield[i][j]=0;\n}\n\nvoid makeMove(int i, int j, int player)\n{\nif(field[i][j]==0 &amp;&amp; player==1 || player==2)    field[i][j]=player;\n}\n}\n</code></pre> <ul> <li>Zust\u00e4nde <code>EMPTY</code> (<code>0</code>), <code>RED</code> (<code>1</code>), <code>BLACK</code> (<code>2</code>) verschl\u00fcsselt \u2192 magic numbers</li> <li><code>field[i][j]</code> k\u00f6nnte auch beliebige andere <code>int</code>-Werte annehmen</li> <li>Code nahezu unlesbar</li> </ul>"},{"location":"enum/#erster-verbesserungsversuch-konstanten","title":"Erster Verbesserungsversuch: Konstanten","text":"Beispiel TicTacToe mit Konstanten <pre><code>public class TicTacToe {\nint[][] field;\nstatic final int EMPTY = 0;     // Feld ist leer\nstatic final int RED = 1;       // auf das Feld hat rot gesetzt\nstatic final int BLACK = 2;     // auf das Feld hat schwarz gesetzt\n\nTicTacToe()\n{\nfield = new int[3][3];\nfor(int i=0; i&lt;field.length; i++)\nfor(int j=0; j&lt;field[i].length; j++)\nfield[i][j]=EMPTY;\n}\n\nvoid makeMove(int i, int j, int player)\n{\nif(field[i][j]==EMPTY &amp;&amp; player==RED || player==BLACK)  field[i][j]=player;     // hier wird auf das Feld rot oder schwarz gesetzt\n}\n}\n</code></pre> <ul> <li>etwas besser, aber immer noch beliebige Werte f\u00fcr <code>field[i][j]</code> m\u00f6glich</li> </ul>"},{"location":"enum/#der-aufzahlungstyp-enum","title":"Der Aufz\u00e4hlungstyp <code>enum</code>","text":"<p>Anforderungen:</p> <ul> <li>eigener Datentyp</li> <li>endliche Anzahl an Zust\u00e4nden bzw. Werten</li> <li>leserliche Bezeichnung der Werte</li> </ul> <p>L\u00f6sung: - Enumerations (sog. Aufz\u00e4hlungstypen) - Schl\u00fcsselwort <code>enum</code></p> <p>Syntax: <pre><code>    enum TypName {WERT1, WERT2, WERT3};\n</code></pre></p> <p>Verwendung: - <code>TypName</code> nun als Datentyp verwendbar, z.B. <code>TypName[][]</code> - Zugriff auf Werte \u00fcber statische Punktschreibweise, z.B. <code>TypName.WERT1</code></p> Beispiel TicTacToe mit enum <pre><code>public class TicTacToe {\nenum State {EMPTY, RED, BLACK};\nState[][] field;\nTicTacToe()\n{\nfield = new State[3][3];\nfor(int i=0; i&lt;field.length; i++)\nfor(int j=0; j&lt;field[i].length; j++)\nfield[i][j]=State.EMPTY;\n}\n\nvoid makeMove(int i, int j, State player)\n{\nif(field[i][j]==State.EMPTY &amp;&amp; player!=State.EMPTY)     field[i][j]=player;\n}\n}\n</code></pre> <ul> <li>typsicher</li> <li>rot und schwarz \u00fcber <code>State.RED</code> und <code>State.BLACK</code> erreichbar</li> <li>andere Zust\u00e4nde nicht m\u00f6glich</li> </ul>"},{"location":"enum/#details","title":"Details:","text":"<ul> <li>alle <code>enum</code> erben implizit von <code>java.lang.Enum</code></li> <li><code>enum</code> sind Referenztypen</li> <li>die Konstanten (Werte) in <code>enum</code> sind automatisch <code>static</code> und <code>final</code></li> <li><code>==</code> kann verwendet werden (auch <code>switch()</code>); <code>equals()</code> gibt es aber auch</li> </ul> Beispiel enum <pre><code>State s = State.EMPTY;  // s = 0 oder s = \"rot\" oder so geht nicht \n//-&gt; typsicher\nswitch(s)\n{\ncase EMPTY:     System.out.println(\"leeres Feld\"); break;\ncase RED:   System.out.println(\"roter Stein\"); break;\ncase BLACK:     System.out.println(\"schwarzer Stein Feld\"); break;\n}\n</code></pre>"},{"location":"enum/#weiteres","title":"Weiteres:","text":"<ul> <li>auch Definition von Methoden m\u00f6glich</li> <li><code>toString()</code>, <code>equals()</code> usw. aus <code>Object</code> k\u00f6nnen \u00fcberschrieben werden</li> <li>Konstanten k\u00f6nnen mit Attributen versehen werden (dann noch privater Konstruktor notwendig)</li> <li>Zugriff auf das Array von Konstanten mithilfe von <code>values()</code></li> </ul> Beispiel f\u00fcr Werte mit Attributennoch ein Beispiel f\u00fcr Werte mit Attributen <pre><code>enum Farben {\nKREUZ(12), PIK(11), HERZ(10), KARO(9);\nprivate int farbwert;\n\nprivate Farben(int wert)\n{\nthis.farbwert=wert;\n}   @Override\npublic String toString()\n{\nchar c = ' ';\nswitch(this)\n{\ncase KREUZ  : c ='\\u2663';  break;\ncase PIK    : c ='\\u2664';  break;\ncase HERZ   : c ='\\u2665';  break;\ncase KARO   : c ='\\u2666';  break;\n}\nreturn String.valueOf(c);\n}\n}\n</code></pre> <pre><code>enum Karten {\nAS(11), ZEHN(10), NEUN(0), ACHT(0), SIEBEN(0), K(4), D(3), B(2);\nprivate int kartenwert;\n\nprivate Karten(int wert)\n{\nthis.kartenwert=wert;\n}\n\n@Override\npublic String toString()\n{\nString s = \"\";\nswitch(this)\n{\ncase AS     : s =\"A\";   break;\ncase ZEHN   : s =\"10\";  break;\ncase NEUN   : s =\"9\";   break;\ncase ACHT   : s =\"8\";   break;\ncase SIEBEN : s =\"7\";   break;\ncase K      : s =\"K\";   break;\ncase D      : s =\"D\";   break;\ncase B      : s =\"B\";   break;\n}\nreturn s;\n}\n}\n</code></pre> Ausf\u00fchrliches Beispiel - Skat.java <pre><code>package vorbereitungen.enums;\n\nimport java.util.Arrays;\nimport java.util.Random;\n\npublic class Skat {\nKarte[] p1;\nKarte[] p2;\nKarte[] p3;\nKarte[] skat;\n\nenum Karten {\nAS(11), ZEHN(10), NEUN(0), ACHT(0), SIEBEN(0), K(4), D(3), B(2);\nprivate int kartenwert;\n\nprivate Karten(int wert)\n{\nthis.kartenwert=wert;\n}\n\n@Override\npublic String toString()\n{\nString s = \"\";\nswitch(this)\n{\ncase AS     : s =\"A\";   break;\ncase ZEHN   : s =\"10\";  break;\ncase NEUN   : s =\"9\";   break;\ncase ACHT   : s =\"8\";   break;\ncase SIEBEN : s =\"7\";   break;\ncase K      : s =\"K\";   break;\ncase D      : s =\"D\";   break;\ncase B      : s =\"B\";   break;\n}\nreturn s;\n}\n}\n\nenum Farben {\nKREUZ(12), PIK(11), HERZ(10), KARO(9);\nprivate int farbwert;\n\nprivate Farben(int wert)\n{\nthis.farbwert=wert;\n}   @Override\npublic String toString()\n{\nchar c = ' ';\nswitch(this)\n{\ncase KREUZ  : c ='\\u2663';  break;\ncase PIK    : c ='\\u2664';  break;\ncase HERZ   : c ='\\u2665';  break;\ncase KARO   : c ='\\u2666';  break;\n}\nreturn String.valueOf(c);\n}\n}\n\nclass Karte {\nKarten k;\nFarben f;\n\nKarte(Karten k, Farben f)\n{\nthis.k=k;\nthis.f=f;\n}\n\n@Override\npublic Karte clone()\n{\nreturn new Karte(this.k,this.f);\n}\n\n@Override\npublic String toString()\n{\nreturn f.toString()+k.toString()+\" \";\n}\n\n}\n\nclass Deck {\nKarte[] deck;\n\nDeck()\n{\ndeck = new Karte[32];\nint index = 0;\nfor(Farben f: Farben.values())\n{\nfor(Karten k:Karten.values())\n{\ndeck[index++] = new Karte(k,f);\n}\n}\n}\n\n@Override\npublic String toString()\n{\nString s = \"\";\nfor(int i=0; i&lt;deck.length; i++)\n{\ns += deck[i].f.toString() + deck[i].k.toString() +\" \";\nif(i==7 || i==15 || i==23 || i==31) s+=\"\\n\";\n}\nreturn s;\n}\n\npublic void print()\n{\nSystem.out.println(this.toString());\n}\n\n}\n\nSkat()\n{\np1 = new Karte[8];\np2 = new Karte[8];\np3 = new Karte[8];\nskat = new Karte[2];    }\n\nboolean existsFalse(boolean[] b)\n{\nfor(int i=0; i&lt;b.length; i++)\n{\nif(!b[i]) return true;\n}\nreturn false;\n}\n\npublic void geben()\n{\nDeck d = new Deck();\nRandom r = new Random();    boolean[] b = new boolean[32]; Arrays.fill(b, false);\nint indexP1 = 0, indexP2 = 0, indexP3 =0, indexSkat = 0;\nint zz = r.nextInt(32);\nwhile(existsFalse(b))\n{\nwhile(b[zz])\n{\nzz = r.nextInt(32);\n}\nb[zz] = true;\nif(indexP1&lt;8)\n{\np1[indexP1++] = d.deck[zz].clone();\n}\nelse if(indexP2&lt;8)\n{\np2[indexP2++] = d.deck[zz].clone();\n}\nelse if(indexP3&lt;8)\n{\np3[indexP3++] = d.deck[zz].clone();\n}\nelse if(indexSkat&lt;2)\n{\nskat[indexSkat++] = d.deck[zz].clone();\n}\n}\n}\n\npublic void sortieren()\n{\n\n}\n\npublic void print()\n{\nSystem.out.print(\"Spieler 1 : \");\nfor(Karte k : p1) System.out.print(k.toString()+\" \");\nSystem.out.println();\nSystem.out.print(\"Spieler 2 : \");\nfor(Karte k : p2) System.out.print(k.toString()+\" \");\nSystem.out.println();\nSystem.out.print(\"Spieler 3 : \");\nfor(Karte k : p3) System.out.print(k.toString()+\" \");\nSystem.out.println();\nSystem.out.print(\"Skat      : \");\nfor(Karte k : skat) System.out.print(k.toString()+\" \");\nSystem.out.println();\n}\n\npublic static void main(String[] args) {\nSkat s = new Skat();\ns.geben();\ns.print();\n\n}\n\n}\n</code></pre>"},{"location":"enum/#nutzliche-links-fur-enums","title":"N\u00fctzliche Links f\u00fcr enums","text":"<ul> <li>Oracle Docs</li> <li>W3Schools</li> <li>Java enums - so geht's</li> <li>Enums</li> <li>Java Tutorial - Enums (youtube)</li> </ul>"},{"location":"exceptions/","title":"Exceptions","text":"<p>Motivation</p> <p>Wir wissen nun, wie wir einen <code>String</code> in ein <code>int</code> umwandeln. N\u00e4mlich mithilfe der <code>parseInt(String)</code>-Methode der Klasse <code>Integer</code>. Was aber passiert, wenn der <code>String</code> gar keiner Zahl entspricht? Dann wird eine Exception geworfen und das Programm sofort beendet. Wir k\u00f6nnen aber gar nichts daf\u00fcr, dass die Nutzerin keine Zahl eingegeben hat. Unser Programm ist eigentlich korrekt. Wie k\u00f6nnen wir den Programmabsturz verhindern? Wie k\u00f6nnen wir die Nutzerin solange bitten, eine Zahl einzugeben, bis sie wirklich eine Zahl eingibt?</p> <p>Exceptions kennen wir schon, denn sie passieren uns h\u00e4ufiger. Wenn wir z.B. auf einen Index in einem Array zugreifen, dieser Index aber gar nicht existiert, wird eine <code>ArrayIndexOutOfBounds</code>-Exception geworfen. Wenn wir auf eine Objekteigenschaft zugreifen wollen, z.B. eine Objektmethode, die daf\u00fcr verwendete Referenzvariable aber gar nicht auf ein Objekt zeigt, sondern auf <code>null</code>, erhalten wir eine <code>NullPointerException</code>. Wenn bei einer Nutzereingabe eine Zahl erwartet wird, um damit weiterrechnen zu k\u00f6nnen, die Nutzerin gibt aber etwas anderes als eine Zahl ein, dann wird ebenfalls eine Exception geworfen. </p> <p>Wir wollen aber gar nicht, dass das Programm in solchen F\u00e4llen abst\u00fcrzt, sondern wir wollen diesen \u201eFehler\u201c erkennen und darauf reagieren. Grunds\u00e4tzlich gibt es also zwei Arten von Fehlern:</p> <ul> <li>syntaktische Fehler \u2192 k\u00f6nnen vom Compiler vor der Laufzeit erkannt werden; das Programm wird gar nicht erst vollst\u00e4ndig compiliert und nicht ausgef\u00fchrt und</li> <li>logische Fehler \u2192 k\u00f6nnen erst zur Laufzeit erkannt werden. </li> </ul> <p>Im Falle der logischen Fehler, die erst zur Laufzeit auftreten, spricht man von Laufzeitfehlern (oder Ausnahmen oder Exceptions). Die Aufgabe beim Programmieren ist nun, zu identifizieren, an welchen Stellen ein logischer Fehler auftreten k\u00f6nnte, z.B. </p> <ul> <li>fehlerhafte Benutzereingabe </li> <li>Datenbank- oder Netzwerkverbindung nicht verf\u00fcgbar </li> <li>gesuchte Datei/Ordner nicht vorhanden usw. </li> </ul> <p>Die Stellen, an denen ein solcher logischer Fehler auftreten k\u00f6nnte, nennen wir im Folgenden kritischer Abschnitt. Wir m\u00fcssen solche kritischen Abschnitte in unserem Quellcode identifizieren und haben dann die M\u00f6glichkeit, solche kritischen Abschnitte so zu implementieren, dass die Exception, die eventuell geworfen wird, abgefangen wird und das Programm dadurch nicht abst\u00fcrzt. </p>"},{"location":"exceptions/#try-catch","title":"try-catch","text":"<p>Die grunds\u00e4tzliche Idee ist die, dass wir zun\u00e4chst versuchen den kritischen Abschnitt einfach auszuf\u00fchren. Wir versuchen z.B. einfach mit einem <code>index</code> auf das Array zuzugreifen, auch wenn wir gar nicht wissen, ob dies ein tats\u00e4chlicher <code>index</code> aus dem Array ist. Allerdings binden wir diesen Versuch in einen <code>try{}</code>-Block ein. </p> <p>Sollte in einem solchen <code>try{}</code>-Block nun eine Exception geworfen werden, dann fangen wir diese in einem <code>catch(){}</code>-Block auf und behandeln sie dort. Die allgemeine Syntax daf\u00fcr sieht so aus:</p> allgemeine Syntax try-catch <pre><code>try {\n// Anweisung(en), die evtl. Fehler verursachen (kritischer Abschnitt)\n}   catch(Exception e)  {\n// Behandlung der Exception \n}\n</code></pre> <p>Es passiert Folgendes: wir f\u00fchren die Anweisung(en) in Zeile <code>3</code> aus. Wenn diese keine Exception wirft, also alles okay ist, dann machen wir einfach hinter dem <code>catch</code>-Block, also nach Zeile <code>8</code> weiter. Wenn aber die Anweisung(en) in Zeile <code>3</code> einen Laufzeitfehler verursachen, also eine Exception werfen, dann wird diese in Zeile <code>5</code> \"aufgefangen\" und in dem Anweisungsblock in den Zeilen <code>6-8</code> behandelt. Das Programm st\u00fcrzt nun nicht mehr ab, sondern wir haben die M\u00f6glichkeit, auf die Exception zu reagieren. </p>"},{"location":"exceptions/#beispiel-ohne-try-catch","title":"Beispiel ohne try-catch","text":"<p>Wir verdeutlichen dieses Prinzip an einem ersten Beispiel:</p> Beispiel zun\u00e4chst ohne Behandlung der Exceptions <pre><code>class Ausnahmen {\n\nstatic char charAt(String s, int index)\n{\nchar c = s.charAt(index);           // kritisch!\nreturn c;\n}\nstatic double divide(int divident, int divisor)\n{\ndouble result = divident/divisor;   // kritisch!\nreturn result;\n}\n\npublic static void main(String[] args) {\nSystem.out.println(divide(5,0));            // ArithmeticException\nSystem.out.println(charAt(\"Hallo\", 5));     // StringIndexOutOfBoundsException\n}\n}\n</code></pre> <p>Das Beispiel enth\u00e4lt zwei Methoden <code>charAt()</code> und <code>divide</code>. Der <code>charAt</code>-Methode wird ein <code>String</code> \u00fcbergeben und ein <code>index</code>. Die Methode gibt das Zeichen (<code>char</code>) zur\u00fcck, dass im <code>String</code> unter dem <code>index</code> gespeichert ist (z.B. <code>charAt(\"Hallo\", 1)</code> gibt das <code>'a'</code> zur\u00fcck). Es wird jedoch gar nicht gepr\u00fcft, ob <code>index</code> tats\u00e4chlich ein korrekter Index des Strings <code>s</code> ist, d.h. evtl. ist <code>index</code> kleiner als <code>0</code> oder gr\u00f6\u00dfer als die L\u00e4nge von <code>s</code> minus <code>1</code>. Die Anweisung  <code>s.charAt(index);</code> ist somit eine kritische Anweisung, denn sie kann (bei \"falschem\" <code>index</code>) eine <code>StringIndexOutOfBoundsException</code> werfen. </p> <p>Genau so ist die Anweisung <code>divident/divisor;</code> in der Methode <code>divide</code> eine kritische Anweisung, da es sein kann, dass der <code>divisior</code> gleich <code>0</code> ist. Bei der <code>int</code>-Division durch <code>0</code> wird eine <code>ArithmeticException</code> geworfen. </p> <p>Wenn die <code>main</code>-Methode nun wie angegeben ausgef\u00fchrt wird, dann \"st\u00fcrzt\" das Programm bereits bei Ausf\u00fchrung von Zeile <code>16</code> ab und Zeile <code>17</code> wird gar nicht mehr erreicht: </p> <pre><code>Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n    at packageName.Ausnahmen.divide(Ausnahmen.java:10)\nat packageName.Ausnahmen.main(Ausnahmen.java:16)\n</code></pre> <p>Die Fehlermeldung gibt uns an, welche Zeile die Ausnahme geworfen hat, n\u00e4mlich <code>Ausnahmen.java:10</code> und um welche Exception es sich handelt, n\u00e4mlich <code>ArithmeticException: / by zero</code>.</p> <p>Wenn wir in der <code>main</code>-Methode Zeile <code>16</code> auskommentieren, dann sehen wir, dass auch die Anweisung in Zeile <code>17</code> eine Exception wirft, n\u00e4mlich: </p> <pre><code>Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: String index out of range: 5\nat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:47)\nat java.base/java.lang.String.charAt(String.java:702)\nat packageName.Ausnahmen.charAt(Ausnahmen.java:5)\nat packageName.Ausnahmen.main(Ausnahmen.java:17)\n</code></pre> <p>Die Fehlermeldung gibt uns an, welche Zeile unseres Programms die Ausnahme geworfen hat, n\u00e4mlich <code>Ausnahmen.java:5</code> und um welche Exception es sich handelt, n\u00e4mlich <code>StringIndexOutOfBoundsException: String index out of range: 5</code>. Sie sehen auch, dass eigentlich sogar die Anweisung in Zeile <code>47</code> in der Klasse <code>StringLatin1</code> in der dortigen Methode <code>charAt</code> die Exception geworfen hat. Wir werden dieses \"Weiterreichen\" von Exceptions gleich noch n\u00e4her betrachten. </p>"},{"location":"exceptions/#beispiel-mit-try-catch","title":"Beispiel mit try-catch","text":"<p>Zun\u00e4chst \"reparieren\" wir unseren Code, indem wir <code>try-catch</code>-Bl\u00f6cke um unsere kritischen Anweisungen hinzuf\u00fcgen:</p> Beispiel mit Behandlung der Exceptions <pre><code>class Ausnahmen {\n\nstatic char charAt(String s, int index)\n{\nchar c = ' ';\ntry\n{\nc = s.charAt(index); // kritisch!\n}\ncatch(StringIndexOutOfBoundsException e)\n{\nSystem.err.println(\"Der Index war ausserhalb des Strings\");\n}\nreturn c;\n}\n\nstatic double divide(int divident, int divisor)\n{\ndouble result = 0.0;\ntry\n{\nresult = divident/divisor; // kritisch!\n}\ncatch(ArithmeticException ae)\n{\nSystem.err.println(\"Division durch 0 nicht definiert!\");\n}\nreturn result;\n}\n\npublic static void main(String[] args) {\nSystem.out.println(divide(5,0));            // ArithmeticException\nSystem.out.println(charAt(\"Hallo\", 5));     // StringIndexOutOfBoundsException\n}\n}\n</code></pre> <p>Die kritischen Anweisungen wurden nun jeweils in einen <code>try</code>-Block integriert und die Behandlung der eventuell auftretenden Exceptions besteht nur aus einer jeweiligen Fehlerausgabe (ich habe hier daf\u00fcr nicht das Standardausgabeger\u00e4t <code>out</code> in den <code>println</code>-Anweisungen verwendet, sondern <code>err</code> - Zeilen <code>12</code> und <code>26</code>). </p> <p>Wenn wir das Programm nun ausf\u00fchren (in <code>main</code> muss auch nichts mehr auskommentiert werden), dann erhalten wir die Ausgabe:</p> <pre><code>Division durch 0 nicht definiert!\n0.0\nDer Index war ausserhalb des Strings\n</code></pre> <p>Das Programm \"st\u00fcrzt\" nun also nicht mehr ab, das ist schonmal ein Erfolg. So ganz optimal ist die L\u00f6sung allerdings noch nicht, da wir nun jeweils einen Nebeneffekt in unsere Methoden eingebaut haben. Angenommen, in der <code>divide</code>-Methode wird eine Exception geworfen, dann erfolgt durch Zeile <code>26</code> die Fehlerausgabe auf die Konsole. Danach wird in Zeile <code>28</code> aber <code>result</code> zur\u00fcckgegeben (hat den Wert <code>0.0</code>, den wir bei der Initailisierung in Zeile <code>19</code> angegeben haben) und dieser Wert wird durch Zeile <code>33</code> auf die Konsole ausgegeben. Das gleiche gilt f\u00fcr die <code>charAt</code>-Methode. Auch da haben wir einen Nebeneffekt eingebaut und es wird durch Zeile <code>34</code> das Leerzeichen auf die Konsole ausgegeben. Nebeneffekte wollen wir aber unbedingt vermeiden und m\u00fcssen unsere Implementierung deshalb noch \u00e4ndern. </p> <p>Zun\u00e4chst schauen wir uns aber den generellen Ablauf einer solchen Ausnahmesituation an:</p>"},{"location":"exceptions/#ablauf-einer-ausnahmesituation","title":"Ablauf einer Ausnahmesituation","text":"<p>Der generelle Ablauf beim \"Werfen\" eine Exception ist wie folgt:</p> <ol> <li>Das Laufzeitsystem (JVM) erzeugt ein Ausnahme-Objekt (Objekt vom Elterntyp <code>Exception</code>), wenn eine Exception \"geworfen\" wird</li> <li>Die Abarbeitung des Programmcodes wird sofort unterbrochen.</li> <li>Das Laufzeitsystem sucht nach der n\u00e4chsten <code>catch</code>-Klausel und f\u00fchrt diese aus.</li> <li>Passt die gefundene <code>catch</code>-Klausel nicht zur Art der Ausnahme, wird die n\u00e4chste <code>catch</code>-Klausel gesucht usw.\u00a0</li> </ol> <p>Betrachten wir nochmal obigen Code, dann stellen wir fest, dass in der einen <code>catch</code>-Klausel (Zeile <code>10</code>) ein Objekt vom Typ <code>StringIndexOutOfBoundsException</code> erwartet wird. Wir werden gleich sehen, dass dies schon ein sehr spezieller Typ in der Vererbungshierarchie von <code>Exception</code> ist. Das Programm w\u00fcrde auch genau so funktionieren, wenn wir dort anstelle von <code>StringIndexOutOfBoundsException</code> allegmein eine <code>Exception</code> erwarten w\u00fcrden. Das gleiche gilt f\u00fcr die andere <code>catch</code>-Klausel (Zeile <code>24</code>), wo wir eine <code>ArithmeticException</code> erwarten. Wir schauen uns die Vererbungshierarchie der Exceptions gleich an. Generell gilt, dass man mehrere <code>catch</code>-Bl\u00f6cke hintereinander setzen kann und der erste <code>catch</code>-Block, der dem erwarteten Parametertyp entspricht, wird ausgef\u00fchrt. </p> <p>Wichtig ist, dass wir uns merken, dass durch eine Exception der Programmablauf sofort unterbrochen und zur n\u00e4chsten \"passenden\" <code>catch</code>-Klausel gesprungen wird. </p>"},{"location":"exceptions/#ein-weiteres-beispiel","title":"Ein weiteres Beispiel","text":"<p>Wir schauen uns dazu ein weiteres Beispiel an und erg\u00e4nzen unsere Klasse <code>Ausnahmen</code> um eine weitere Methode <code>inputInt()</code>:</p> eine weitere methode inputInt() <pre><code>/*\n * Sollten Sie mit dem Modul-System von Java arbeiten, d.h. sollten\n * Sie eine Datei module-info.java in Ihrem Projekt-Ordner haben, \n * dann muessen Sie dort noch\n * module ProjektName\n * {\n *  requires java.desktop;\n * }\n * eintragen, damit Sie das Paket javax.swing importieren koennen. \n */\nimport javax.swing.JOptionPane;\n\npublic class Ausnahmen\n{\nstatic char charAt(String s, int index)\n{\nchar c = ' ';\ntry\n{\nc = s.charAt(index); // kritisch!\n}\ncatch(StringIndexOutOfBoundsException e)\n{\nSystem.err.println(\"Der Index war ausserhalb des Strings\");\n}\nreturn c;\n}\n\nstatic double divide(int divident, int divisor)\n{\ndouble result = 0.0;\ntry\n{\nresult = divident/divisor; // kritisch!\n}\ncatch(ArithmeticException ae)\n{\nSystem.err.println(\"Division durch 0 nicht definiert!\");\n}\nreturn result;\n}\n\nstatic int inputInt()\n{\nint inputInt = 0;\nboolean inputOk = false;\nString input =\"\";\nwhile(!inputOk)\n{\ninput = JOptionPane.showInputDialog(\"Zahl :\");\ninputOk = true;\ntry {\ninputInt = Integer.parseInt(input);\n}\ncatch(NumberFormatException e)\n{\ninputOk = false;\n}\n}\nreturn inputInt;\n}\npublic static void main(String[] args) {\nSystem.out.println(divide(5,0));            // ArithmeticException\nSystem.out.println(charAt(\"Hallo\", 5));     // StringIndexOutOfBoundsException\nSystem.out.println(\"Zahl: \" + inputInt());  // NumberFormatException\n}\n}\n</code></pre> <p>Schauen wir uns die Implementierung von <code>inputInt()</code> genauer an: </p> <ul> <li>in Zeile <code>50</code> wird ein kleines Eingabefenster erzeugt (<code>JOptionPane</code> ist eine Klasse aus dem <code>javax.swing</code>-Paket, welches wiederum im Modul <code>java.desktop</code> verf\u00fcgbar ist). Die Eingabe in dieses Fenster wird als <code>String</code> zur\u00fcckgegeben und in der Variablen <code>input</code> gespeichert. </li> <li>in Zeile <code>53</code> wird versucht, den Eingabestring <code>input</code> in ein <code>int</code> umzuwandeln. Dazu wird die Methode <code>parseInt()</code> verwendet, die zur Klasse <code>Integer</code> geh\u00f6rt (<code>Integer</code> ist eine sogenannte Wrapper-Klasse - diese schauen wir uns n\u00e4chste Woche an). </li> <li>wenn <code>input</code> eine Zahl enth\u00e4lt, also z.B. so aussieht: <code>\"1234\"</code>, dann erzeugt <code>parseInt()</code> daraus die <code>int</code>-Zahl <code>1234</code> und alles ist ok. Wenn <code>input</code> jedoch keine Zahl enth\u00e4lt, also z.B. <code>\"hallo\"</code>, dann wirft <code>parseInt()</code> eine <code>NumberFormatException</code>, weil die Umwandlung des <code>String</code>s in ein <code>int</code> nicht m\u00f6glich ist. </li> <li>in Zeile <code>55</code> wird eine solche <code>NumberFormatException</code> aufgefangen. Die \"Behandlung\" dieser Excepion sieht so aus, dass der Schalter <code>inputOk</code> auf <code>false</code> gesetzt wird. </li> <li>der gesamte Anweisungsblock Fenster-&gt;Eingabe-&gt;try-catch ist in eine Schleife eingebettet. Diese Schleife wird so lange ausgef\u00fchrt, so lange der Wert von <code>inputOk</code> nicht <code>false</code> ist. Das bedeutet, wenn keine Zahl eingegeben wird, dann \u00f6ffnet sich das Fenster erneut und es muss so lange eine Eingabe erfolgen, bis die Eingabe einer Zahl entspricht (und somit <code>parseInt()</code> keine Exception wirft)</li> </ul> <p>\u00dcbrigens k\u00f6nnte die Anweisung <code>inputOk = true;</code> auch nach <code>parseInt()</code> in den <code>try</code>-Block geschrieben werden:</p> <pre><code>static int inputInt()\n{\nint inputInt = 0;\nboolean inputOk = false;\nString input =\"\";\nwhile(!inputOk)\n{\ninput = JOptionPane.showInputDialog(\"Zahl :\");\ntry {\ninputInt = Integer.parseInt(input);\ninputOk = true;\n}\ncatch(NumberFormatException e)\n{\ninputOk = false;\n}\n}\nreturn inputInt;\n}\n</code></pre> <p>Zeile <code>12</code> wird nur genau dann erreicht, wenn <code>parseInt()</code> keine Exception wirft. Dann wird auch der <code>catch</code>-Block nicht betreten und die Schleife wird beendet. </p>"},{"location":"exceptions/#beispiel-mit-mehreren-exceptions","title":"Beispiel mit mehreren Exceptions","text":"<p>Wir betrachten jetzt einmal an einem Besipiel die bei Ablauf einer Ausnahmesituation unter Punkt 4 beschriebene Situation, dass die n\u00e4chstpassende <code>catch</code>-Klausel gesucht wird. Wir erweitern dazu unsere Klasse <code>Ausnahmen</code> um eine weitere Methode <code>mehrereExceptions()</code>:</p> <pre><code>public static void mehrereExceptions()\n{\nString[] basen = {\"2\", \"8\", \"10\", \"Hi\"};\nint base = 0;\ndouble result= 0;\nboolean ok = true;\n\nfor(int index = 0; index&lt;=4; index++) {\ntry {\nbase = Integer.parseInt(basen[index]);\nok = true;\n}\ncatch(NumberFormatException nfe) {\nSystem.out.println(\"Keine Zahl!\");\nok = false;\n}\ncatch(IndexOutOfBoundsException ioobe) {\nSystem.out.println(\"Ausserhalb des Arrays\");\nok = false;\n}\nfor(int exp = 0; exp&lt;6 &amp;&amp; ok; exp++) {\nresult = Math.pow(base, exp);\nSystem.out.printf(\"%d ^ %d = %.0f %n\", base, exp, result);\n}\n}\n}\n</code></pre> <ul> <li>In Zeile <code>3</code> definieren wir uns ein <code>String[]</code> mit 4 Eintr\u00e4gen. </li> <li>Durch dieses <code>String[]</code> laufen wir mit einer <code>for</code>-Schleife (Zeile <code>8</code>) durch.</li> <li>In Zeile <code>11</code> wandeln wir jeden Eintrag aus dem <code>String[]</code> in eine <code>int</code>-Zahl um. </li> <li>An zwei Stellen k\u00f6nnen Exceptions geworfen werden:<ul> <li>Bei dem Index-basierten Zugriff auf das Array <code>basen[index]</code> in Zeile <code>11</code> kann eine <code>ArrayIndexOutOfBounds</code>-Exception geworfen werden, falls <code>index</code> kein korrekter Index des <code>String[]</code> ist (gilt f\u00fcr <code>index==4</code>).</li> <li>Bei der Umwandlung von <code>String</code> nach <code>int</code> durch <code>parseInt()</code> in Zeile <code>11</code> kann eine <code>NumberFormatException</code> geworfen werden, falls der entsprechende Eintrag im <code>String[]</code> keine Zahl ist (gilt f\u00fcr <code>basen[3]=='Hi'</code>).</li> </ul> </li> </ul> <p>Die Methode erzeugt die folgende Ausgabe:</p> <pre><code>2 ^ 0 = 1 2 ^ 1 = 2 2 ^ 2 = 4 2 ^ 3 = 8 2 ^ 4 = 16 2 ^ 5 = 32 8 ^ 0 = 1 8 ^ 1 = 8 8 ^ 2 = 64 8 ^ 3 = 512 8 ^ 4 = 4096 8 ^ 5 = 32768 10 ^ 0 = 1 10 ^ 1 = 10 10 ^ 2 = 100 10 ^ 3 = 1000 10 ^ 4 = 10000 10 ^ 5 = 100000 \nKeine Zahl!\nAusserhalb des Arrays\n</code></pre> <p>Das hei\u00dft, dass wenn f\u00fcr <code>parseInt(\"Hi\")</code> eine <code>NumberFormatException</code> geworfen wird, dann wird der <code>catch</code>-Block ausgef\u00fchrt, der eine <code>NumberFormatException</code> erwartet (Zeilen <code>14-17</code>). Der andere <code>catch</code>-Block wird nicht ausgef\u00fchrt. </p> <p>Wenn f\u00fcr <code>basen[4]</code> eine <code>ArrayIndexOutOfBoundsException</code> geworfen wird, dann wird der  <code>catch</code>-Block ausgef\u00fchrt, der eine <code>IndexOutOfBoundsException</code> erwartet (Zeilen <code>18-21</code>). Der andere <code>catch</code>-Block wird nicht ausgef\u00fchrt.</p> <p>Wir sehen, dass es offensichtlich auch eine <code>IndexOutOfBoundsException</code>-Klasse gibt. Das ist eine Elternklasse von <code>ArrayIndexOutOfBoundsException</code> und auch von <code>StringIndexOutOfBoundsException</code>. Wir schauen uns diese Vererbungshierarchie von <code>Exception</code> nun mal an:</p>"},{"location":"exceptions/#die-vererbungshierarchie-der-klasse-exception","title":"Die Vererbungshierarchie der Klasse Exception","text":"<p>Wenn Sie sich die Klasse <code>Exception</code> in der Java-Dokumentation einmal anschauen, dann sehen Sie, dass diese Klasse ein Unmenge von Kindklassen hat. Wir betrachten hier einmal die f\u00fcr uns wichtigsten Klassen:</p> <p></p> <p>Alle Exception-Klassen erben von der Klasse <code>Exception</code>, die im <code>java.lang</code>-Paket definiert ist. Grunds\u00e4tzlich werden zwei Arten von Exceptions unterschieden:</p> <ul> <li>checked Exceptions: Checked Exceptions m\u00fcssen gepr\u00fcft werden, d.h. Methoden, die eine checked Exception werfen k\u00f6nnen, m\u00fcssen in einen <code>try-catch</code>-Block integriert werden. Dies wird bereits zur Compilezeit gepr\u00fcft, d.h. das Programm l\u00e4sst sich gar nicht compilieren, wenn eine Methode, die eventuell eine checked Exception wirft, nicht in einem <code>try</code>-Block steht. In der Abbildung stehen checked Exceptions auf der rechten Seite (gr\u00fcn). </li> <li>unchecked Exceptions: Unchecked Exceptions k\u00f6nnen gepr\u00fcft werden, m\u00fcssen aber nicht. Alle unchecked Exceptions leiten sich von der Klasse <code>RunTimeException</code> ab. Wir werden uns genau mit diesen uncheck Exceptions, also von <code>RunTimeException</code> abgeleiteten Klassen besch\u00e4ftigen. </li> </ul> <p>Es gibt von <code>RunTimeException</code> noch viele weitere Kindklassen, wie man in der Java-Dokumentation sehen kann, aber die in der Abbildung gezeigten sind die wichtigsten. Eine Kindklasse davon, die <code>IllegalArgumentException</code>-Klasse wird f\u00fcr uns noch eine weitere Rolle spielen, da wir von ihr erben werden, wenn wir uns eigene <code>Exception</code>-Klassen erstellen. </p>"},{"location":"exceptions/#try-catch-finally","title":"try-catch-finally","text":"<p>Prinzipiell besteht das Konstrukt <code>try</code> und <code>catch</code> nicht nur aus diesen beiden Bl\u00f6cken, sondern auch noch aus dem <code>finally</code>-Block. Der <code>finally</code>-Block wird grunds\u00e4tzlich immer ausgef\u00fchrt, egal, ob eine Exception geworfen wird oder nicht. Die Syntax ist wie folgt:</p> <pre><code>    try {\n// Anweisung(en), die evtl. Fehler verursachen (kritischer Abschnitt)\n}   catch(Exception e)  {\n// Behandlung der Exception \n}\nfinally\n{\n// Aufraeumen, z.B. Schliessen von Dateien, Beenden von \n// Verbindungen zu Servern, Datenbanken etc.\n}\n</code></pre> <p>Typischerweise wird der <code>finally</code>-Block dazu verwendet, bestimmte Ressourcen wieder freizugeben, z.B. Dateien zu schlie\u00dfen, Verbindungen zu Servern, Datenbanken usw. zu beenden. Wir werden <code>finally</code> jedoch nicht sehr oft implementieren. </p>"},{"location":"exceptions/#throws-eine-exception-weiterreichen","title":"throws - eine Exception weiterreichen","text":"<p>Wir haben bis jetzt immer in den Methoden, in denen die kritische Anweisung ausgef\u00fchrt wurde, diese direkt mit einem <code>try-catch</code>-Block \"ummantelt\". Das muss nicht unbedingt sein. Wir k\u00f6nnen eine in einer Methode geworfene Exception auch an die aufrufende Methode weiterreichen. Dann kann (und sollte) die Exception in der aufrufenden Methode abgefangen und behandelt werden. Um anzugeben, dass eine Methode evtl. eine Exception wirft, wird das Schl\u00fcsselwort <code>throws</code> verwendet. Wir erweiteren also die Deklaration einer Methode (also den Methodenkopf) um <code>throws</code> und danach kommt der entsprechende Typ der Exception, die in der Methode geworfen werden kann. Die allgemeine Syntax einer Methodendeklaration sieht somit so aus:</p> <pre><code>[modifizierer] [rueckgabetyp] methodenname throws ExceptionType\n{\n// Anweisungsblock\n// wirft (evtl.) Exception\n}   </code></pre> <p>Wir betrachten auch daf\u00fcr ein Beispiel und erweiteren unsere Klasse <code>Ausnahmen</code> um die Methode <code>getValueAtIndex</code>: </p> <pre><code>static int getValueAtIndex(int[] field, int index) throws ArrayIndexOutOfBoundsException\n{\nreturn field[index];\n}\n\n\npublic static void main(String[] args) {\nSystem.out.println(divide(5,0));            // ArithmeticException\nSystem.out.println(charAt(\"Hallo\", 5));     // StringIndexOutOfBoundsException\nSystem.out.println(\"Zahl: \" + inputInt());  // NumberFormatException\nmehrereExceptions();\n\nint value = 0;\nboolean ok = true;\nint[] field = {8, 3,-4, 2, -9};\ntry\n{\nvalue = getValueAtIndex(field,-3);\n}\ncatch(ArrayIndexOutOfBoundsException e)\n{\nSystem.out.println(\"Index ausserhalb des Arrays!\");\nok = false;\n}\nif(ok) {\nSystem.out.println(\"value : \" + value);\n}\n}\n</code></pre> <p>Obwohl die Methode eine kritische Anweisung enth\u00e4lt (<code>field[index]</code>), ist diese Anweisung nicht in einen <code>try-catch</code>-Block eingebunden. Es kann nun also sein, dass bei Aufruf der Methode eine Exception (eine <code>ArrayIndexOutOfBoundsException</code>) geworfen wird. Wir geben das im Methodenkopf mithilfe von <code>throws ArrayIndexOutOfBoundsException</code> bekannt. Die aufrufende Methode (<code>main</code>) kann nun selbst den Aufruf der Methode <code>getValueAtIndex()</code> in einen <code>try-catch</code>-Block ummanteln und somit die Exception selbst abfangen und behandeln. Nur wenn keine Exception geworfen wird, wird der von der Methode <code>getValueAtIndex()</code> zur\u00fcckgegebene Wert ausgegeben. </p> <p>Wenn wir an unsere einleitenden Beispiele denken (Methoden <code>charAt()</code> und <code>divide()</code>), dann erinnern wir uns, dass wir dort festegestellt haben, dss die Implementierung so nicht g\u00fcnstig war, da sie Nebeneffekte erzeugt hat, sobald eine Exception geworfen wurde. Diese Nebeneffekte werden bei der Implementierung von <code>getValueAtIndex()</code> vermieden, obwohl die grunds\u00e4tzliche Idee die gleiche ist, wie bei <code>charAt()</code>. Der Nachteil ist, dass man die aufrufende Methode \"zwingt\", die Exception selbst zu behandeln. </p>"},{"location":"exceptions/#schoner-code","title":"Sch\u00f6ner Code","text":"<p>Der letzte Satz aus dem vorherigen Abschnitt ist insofern nicht ganz richtig, dass mit unchecked Exceptions ja genau nicht erzwungen wird, eventuelle Exceptions abzufangen. Es gibt gute Gr\u00fcnde daf\u00fcr, alle eigenen Exceptions eher als checked Exceptions zu definieren, als als unchecked Exceptions. Aber zu eigenen Exceptions kommen wir gleich. </p> <p>Trotzdem k\u00f6nnen wir uns schon zum jetzigen Zeitpunkt einige Gedanken, \u00fcber sch\u00f6nen Code in Bezug auf Exceptions machen: </p> <ol> <li>eine Methode sollte immer nur eine Sache erledigen (single responsibility principle - SRP)</li> <li>\u2192 die Methode kann nicht auch noch f\u00fcr das Abfangen des Fehlers zust\u00e4ndig sein (try-catch-Bl\u00f6cke sind eh \u201eh\u00e4sslich\u201c und unleserlich)</li> <li>\u2192 lassen Sie Methode, die etwas erledigt, eine Exception werfen und leiten Sie diese weiter (<code>throws</code>) </li> <li>\u2192 fangen Sie den Fehler in einer anderen Methode ab (<code>try</code>)</li> <li>\u2192 Sie k\u00f6nnen sogar die eigentliche Behandlung des Fehlers (<code>catch</code>) in eine dritte Methode auslagern (single responsibility)</li> </ol> <p>H\u00e4ufig sieht man, dass die Methode, die den Fehler abf\u00e4ngt (<code>try</code>) im <code>catch</code>-Block den Fehler protokolliert (in ein ErrorLog-File) und dann eine eigens erzeugte Exception an die Methode weiterleitet, die den Fehler behandelt. Wie man eine Exception erzeugt, schauen wir uns jetzt an. </p>"},{"location":"exceptions/#throw-eigene-exceptions-erzeugen","title":"throw - eigene Exceptions erzeugen","text":"<p>Zun\u00e4chst kommt ein neues Schl\u00fcsselwort hinzu, n\u00e4mlich <code>throw</code>. Ungl\u00fccklicherweise ist dies dem Schl\u00fcsselwort <code>throws</code> sehr \u00e4hnlich. Mit <code>throw</code> erzeugen (werfen) wir eine eigene Exception, mit <code>throws</code> wird im Methodenkopf angegeben, dass die Methode (eventuell) eine Exception wirft und diese an die aufrufende Methode weitergibt. </p> <p>Angenommen, f\u00fcr einen Konstruktor der Klasse Dreieck werden Seitenl\u00e4ngen \u00fcbergeben, die entweder kleiner als 0 oder die Summe von 2 Seitenl\u00e4ngen ist kleiner als die dritte Seite ist. Wir hatten uns bei der Bearbeitung der Aufgabe <code>Triangle</code>im ersten Semester bereits \u00fcberlegt, dass dadurch kein \"richtiges\" Dreieck erzeugt wird, aber wir konnten das noch nicht verhindern. Das machen wir jetzt. Wie k\u00f6nnen wir also verhindern, dass ein solches Objekt erzeugt wird?</p> <p>Die L\u00f6sung besteht darin, eine eigene Exception zu definieren und diese im Fehlerfall zu werfen. Mithilfe des Schl\u00fcsselwortes <code>throw</code> wird also eine eigene Exception geworfen. Bis jetzt wurden unsere Exceptions ja (\"automatisch\" durch die Laufzeitumgebung) geworfen. </p> <p>F\u00fcr eine eigene Exception haben wir zwei M\u00f6glichkeiten:</p> <ul> <li>entweder erstellen wir uns eine eigene Exception-Klasse und leiten diese von der Klasse <code>Exception</code> oder von der Klasse <code>RunTimeException</code> ab (<code>extends Exception</code> bzw. <code>extends RunTimeException</code>) oder</li> <li>wir verwenden eine bereits existierende Exception-Klasse (typischerweise <code>IllegalArgumentException</code>).</li> </ul>"},{"location":"exceptions/#throw-new-illegalargumentexception","title":"throw new IllegalArgumentException","text":"<p>Wir implementieren unsere Klasse <code>Triangle</code> so, dass wir im Konstruktor f\u00fcr den Fall, dass eine Seite kleiner gleich 0 ist, eine <code>IllegalArgumentException</code> werfen. Dieser Exception kann ein <code>String</code> als Parameter \u00fcbergeben werden, der im <code>catch</code>-Block mittels <code>getMessage()</code> wieder ausgelesen werden kann. Das gleiche machen wir f\u00fcr den Fall, dass die Summe von zwei Seiten kleiner der dritten Seite ist.</p> Triangle mit eigenen IllegalArgumentExceptions <pre><code>public class Triangle\n{\nprivate int a,b,c;\n\npublic Triangle(int a, int b, int c) throws IllegalArgumentException\n{\nif(a&lt;=0 || b&lt;=0 || c&lt;=0) {\nthrow new IllegalArgumentException(\"Seiten muessen groesser als 0 sein!\");\n}\nelse if(a&gt;=(b+c) || b&gt;=(a+c) || c&gt;=(a+b)) {\nthrow new IllegalArgumentException(\"Kein Dreieck!\");\n}\nelse {\nthis.a = a;\nthis.b = b;\nthis.c = c;\n}\n}\npublic static void main(String[] args) {\nTriangle d;\n\ntry {\nd = new Triangle(3,4,5);        //(3,4,0) und (3,4,8) probieren\n}\ncatch(IllegalArgumentException e) {\nSystem.out.println(e.getMessage());\n}\n}\n}\n</code></pre> <p>Der Konstruktor f\u00e4ngt die Exception nicht selbst auf und behandelt sie auch nicht selbst, sondern leitet sie an die aufrufende Methode weiter (Zeile <code>5</code> - <code>throws IllegalArgumentException</code>). Im Konstruktor werden die Parameterwerte gepr\u00fcft und</p> <ul> <li>entweder eine <code>IllegalArgumentException</code> geworfen, falls eine Seite kleiner gleich 0 ist (Zeile <code>9</code> - <code>throw new</code>) </li> <li>oder eine <code>IllegalArgumentException</code> geworfen, falls die Summe von zwei Seiten kleiner als die dritte Seite ist (Zeile <code>13</code> - <code>throw new</code>) </li> <li>oder die Objektvariablen die Werte der Parameter bekommen (wenn alles ok ist - Zeilen <code>17-19</code>).</li> </ul> <p>Die Erzeugung eines <code>Triangle</code>-Objektes (also der Aufruf des Konstruktors) ist nun in einen <code>try-catch</code>-Block eingebettet (Zeilen <code>26-32</code>). Beachten Sie, dass es sein kann, dass <code>d</code> nach Aufruf des Konstruktors immernoch <code>null</code> ist (n\u00e4mlich dann, wenn eine Exception geworfen wird). Wir haben hier gleich die <code>main</code>-Methode mit in die Klasse genommen, das sollte man nat\u00fcrlich nicht machen.</p>"},{"location":"exceptions/#eigene-exception-klasse-definieren","title":"Eigene Exception-Klasse definieren","text":"<p>Wir erstellen uns eigene Exception-Klassen f\u00fcr die oben beschriebenen \"Fehler\" im Konstruktor von <code>Triangle</code>. Diese eigenen Exception-Klassen erben von der Klasse <code>Exception</code>. Damit sind die eigenen Exceptions checked Exceptions, d.h. sie m\u00fcssen in einem <code>try-catch</code>-Block abgefangen und behandelt werden. </p> Eigene Klasse IllegalTriangleException <pre><code>public class IllegalTriangleException extends Exception\n{\npublic IllegalTriangleException(String s) {\nsuper(s);\n}\n\npublic IllegalTriangleException() {\nsuper(\"Each side has to be smaller than the sum of the other sides!\");\n}\n}\n</code></pre> <p>Die Klasse <code>IllegalTriangleException</code> verwenden wir f\u00fcr den Fall, dass die Summe zweier Seiten kleiner als die dritte Seite ist. </p> Eigene Klasse IllegalSideLengthException <pre><code>public class IllegalSideLengthException extends Exception\n{\n\npublic IllegalSideLengthException(String s) {\nsuper(s);\n}\n\npublic IllegalSideLengthException() {\nsuper(\"Sides must be greater than zero!\");\n}\n}\n</code></pre> <p>Die Klasse <code>IllegalSideLengthException</code> verwenden wir f\u00fcr den Fall, dass eine Seite kleiner gleich 0 ist. F\u00fcr beide Klassen haben wir jeweils einen parameterlosen Konstruktor definiert, der ein Objekt von <code>Exception</code> erzeugt und dem eine Fehlermeldung als <code>String</code> im Parameter \u00fcbergeben wird. Au\u00dferdem haben wir in beiden Klassen noch einen parametrisierten Konstruktor, dem eine Fehlermeldung als <code>String</code> \u00fcbergeben werden kann. Wir haben nun die Wahl, ob wir den paarmeterlosen oder den parametrisierten Konstruktor verwenden. </p> <p>Die Anwendung dieser beiden Exception-Klassen in der Klasse <code>Triangle</code> k\u00f6nnte nun so aussehen (wir haben hier auch gleich die <code>main</code>-Methode mit in die Klasse genommen, das sollte man nat\u00fcrlich nicht machen):</p> Triangle mit den selbst definierten Exception-Klassen <pre><code>public class Triangle\n{\nprivate int a,b,c;\n\npublic Triangle(int a, int b, int c) throws Exception\n{\nif(a&lt;=0 || b&lt;=0 || c&lt;=0) {\nthrow new IllegalTriangleException();\n}\nelse if(a&gt;=(b+c) || b&gt;=(a+c) || c&gt;=(a+b)) {\nthrow new IllegalSideLengthException();\n}\nelse {\nthis.a = a;\nthis.b = b;\nthis.c = c;\n}\n}\n\npublic static void main(String[] args) {\nTriangle d;\n\ntry {\nd = new Triangle(3,4,5);        //(3,4,0) und (3,4,8) probieren\n}\ncatch(Exception e) {\nSystem.out.println(e.getMessage());\n}\n\n}\n}\n</code></pre> <p>Beide eigenen Klassen sind ja auch vom Laufzeittyp <code>Exception</code>, da sie von dieser Klasse geerbt haben. Insofern ist der Parametertyp in der <code>catch</code>-Klausel mit <code>Exception</code> (Zeile <code>30</code>) passend. Wenn Sie anstelle der Zeilen <code>27-33</code> nur <code>d = new Triangle(3,4,5);</code> schreiben, stellen Sie fest, dass sich das Programm nicht \u00fcbersetzen l\u00e4sst, da es sich um checked Exceptions handelt, die in einem <code>try-catch</code>-Block abgefangen werden m\u00fcssen. Eclipse bietet Ihnen dann aber einen QuickFix an <code>Surround with try/catch</code>. Das sollten Sie einmal ausprobieren. </p> <p>Wenn Sie anstelle von <code>Exception</code> von der Klasse <code>RunTimeException</code> erben, dann handelt es sich bei Ihren Exceptions um unchecked Exceptions. Es ist aber besseres Programmieren, wenn man checked Exceptions erstellt, denn dazu sind die Exceptions ja da, dass sie abgefangen und behandelt werden.</p> <p>Success</p> <p>Wir haben Exceptions kennengelernt. Solche Laufzeitfehler k\u00f6nnen an verschiedenen Stellen passieren und haben unterschiedliche Typen (siehe Kindklassen von <code>Exception</code>, insb. von <code>RunTimeException</code>). Mithilfe von <code>try-catch-[finally]</code> k\u00f6nnen wir solche Exceptions abfangen und behandeln. Damit st\u00fcrzt unser Programm nicht mehr ab. Mithilfe von <code>throws</code> zeigt eine Methode an, dass sie eine Exception erzeugen kann. Das Schl\u00fcsselwort <code>throw</code> weist die Laufzeitumgebung an, das angegebene Laufzeitobjekt (eine Exception) zu erzeugen und zu werfen. Checked Exceptions m\u00fcssen behandelt werden (Aufruf der Exception-werfenden Methode in einem <code>try-catch</code>-Block). Unchecked Exceptions k\u00f6nnen behandelt werden, m\u00fcssen aber nicht, sollten aber. K\u00f6nnen wir ja jetzt schlie\u00dflich...</p>"},{"location":"uebungen/","title":"\u00dcbungen","text":""},{"location":"uebungen/#ubung-1-codereview-und-static","title":"\u00dcbung 1 (Codereview und static)","text":"Was ist an diesem Code alles falsch? <pre><code>package uebungen.uebung1;\n\n/*\n * \u00b0C = (\u00b0F - 32) * 5/9 (von Fahrenheit in Celsius)\n * \u00b0F = \u00b0C * 1,8 + 32 (von Celsius nach Fahrenheit)\n */\n\npublic class Konvertierung {\n\nprivate double celsius;\nprivate double fahrenheit;\n\npublic Konvertierung(double celsius) {       this.celsius = celsius;\nthis.fahrenheit = celsius * 1.8 + 32;       }\n\npublic Konvertierung(double fahrenheit) {       this.celsius = fahrenheit - 32 * 5/9;\nthis.fahrenheit = fahrenheit;       }\n\npublic void print()\n{\nSystem.out.println(this.celsius + \"\\u00B0C = \" + this.fahrenheit + \"\\u00B0F\");\n}\n}\n</code></pre> Eine m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 1 <pre><code>package uebungen.uebung1;\n\n/*\n * \u00b0C = (\u00b0F - 32) * 5/9 (von Fahrenheit in Celsius)\n * \u00b0F = \u00b0C * 1,8 + 32 (von Celsius nach Fahrenheit)\n */\n\npublic class Konvertierung {\n\nprivate Konvertierung() {\n\n}\n\npublic static double celsiusToFahrenheit(double celsius) {\nfinal double FACTOR_CELSIUS_TO_FAHRENHEIT = 1.8;\nfinal int DIFFERENCE_CELSIUS_TO_FAHRENHEIT = 32;\n\ndouble fahrenheit = celsius * FACTOR_CELSIUS_TO_FAHRENHEIT + DIFFERENCE_CELSIUS_TO_FAHRENHEIT; return fahrenheit;\n}\n\npublic static double fahrenheitToCelsius(double fahrenheit) {\nfinal double FACTOR_FAHRENHEIT_TO_CELSIUS = 5.0/9.0;\nfinal int DIFFERENCE_FAHRENHEIT_TO_CELSIUS = 32;\n\ndouble celsius = (fahrenheit - DIFFERENCE_FAHRENHEIT_TO_CELSIUS) * FACTOR_FAHRENHEIT_TO_CELSIUS;\n\nreturn celsius;\n}\n}\n</code></pre>"},{"location":"uebungen/#ubung-2-string-und-algorithmisches-denken","title":"\u00dcbung 2 (String und algorithmisches Denken)","text":"\u00dcbung 2 <ol> <li> <p>Erstellen Sie im Paket <code>uebungen.uebung2</code> eine Java-Klasse <code>Uebung2</code> mit <code>main()</code>-Methode. In diese Klasse implementieren wir statische Methoden. \u00d6ffnen Sie zum L\u00f6sen der \u00dcbung am besten die JavaDoc-Dokumentation der Klasse String. \u00dcberlegen Sie sich, bevor Sie jeweils anfangen zu implementieren, genau, wie Sie vorgehen m\u00f6chten.</p> </li> <li> <p>Implementieren Sie eine Methode <code>static boolean isBinaryNumber(String s)</code>. Diese Methode \u00fcberpr\u00fcft, ob der <code>String s</code> einer Bin\u00e4rzahl entspricht, d.h. ob er nur <code>0</code> und <code>1</code> enth\u00e4lt. </p> </li> <li> <p>Testen Sie die Methode <code>isBinaryNumber(String s)</code> z.B. mit den folgenden Aufrufen: <pre><code>System.out.println(isBinaryNumber(\"101101\"));   // true\nSystem.out.println(isBinaryNumber(\"0\"));        // true\nSystem.out.println(isBinaryNumber(\"101a01\"));   // false\nSystem.out.println(isBinaryNumber(\"101201\"));   // false\n</code></pre></p> </li> <li> <p>Implementieren Sie eine Methode <code>static int binaryToDecimal(String s)</code>. Diese Methode wandelt den <code>String s</code> in eine Dezimalzahl um, wenn <code>s</code> einer Bin\u00e4rzahl entspricht. Wenn <code>s</code> keiner Bin\u00e4rzahl entspricht, wird <code>-1</code> zur\u00fcckgegeben. </p> </li> <li> <p>Testen Sie die Methode <code>binaryToDecimal(String s)</code> z.B. mit den folgenden Aufrufen: <pre><code>System.out.println(binaryToDecimal(\"101101\"));  // 45\nSystem.out.println(binaryToDecimal(\"0\"));       // 0\nSystem.out.println(binaryToDecimal(\"000001\"));  // 1\nSystem.out.println(binaryToDecimal(\"100000\"));  // 32\nSystem.out.println(binaryToDecimal(\"101a01\"));  // -1\nSystem.out.println(binaryToDecimal(\"101201\"));  // -1\n</code></pre></p> </li> <li> <p>Implementieren Sie eine Methode <code>static String toLowerCase(String input)</code>. Diese Methode wandelt alle Gro\u00dfbuchstaben ('A'...'Z') in Kleinbuchstaben um (und nur diese - alle anderen Zeichen bleiben erhalten). Schauen Sie sich dazu auch nochmal die ASCII-Tabelle an.</p> </li> <li> <p>Testen Sie die Methode <code>toLowerCase(String input)</code> z.B. mit den folgenden Aufrufen: <pre><code>System.out.println(toLowerCase(\"abcdEFG\"));     // abcdefg\nSystem.out.println(toLowerCase(\"abcd123EFG\"));  // abcd123efg\nSystem.out.println(toLowerCase(\"ABC XYZ !%\"));  // abc xyz !%\n</code></pre></p> </li> </ol> <p>Zusatz:</p> <ol> <li> <p>Implementieren Sie eine Methode <code>static boolean isPalindrome(String input)</code>. Diese Methode pr\u00fcft, ob es sich bei <code>input</code> um ein Palindrom handelt (also von vorne nach hinten genauso gelesen werden kann, wie von hinten nach vorne). Gro\u00df- und Kleinschreibung wird nicht ber\u00fccksichtigt! Die Methode substring(int,int) aus <code>String</code> ist dabei wahrscheinlich n\u00fctzlich!</p> </li> <li> <p>Testen Sie die Methode <code>isPalindrome(String input)</code> z.B. mit den folgenden Aufrufen: <pre><code>System.out.println(isPalindrome(\"Otto\"));       // true\nSystem.out.println(isPalindrome(\"abc_CBA\"));    // true\nSystem.out.println(isPalindrome(\"abc_-CBA\"));   // false\nSystem.out.println(isPalindrome(\"-\"));          // true\nSystem.out.println(isPalindrome(\"Dreh mal am Herd\"));   // false \n</code></pre></p> </li> <li> <p>Angenommen, Sie sollen f\u00fcr einen gegebenen <code>String</code> angeben, ob er korrekt geklammerte Ausdr\u00fccke enth\u00e4lt (nur die Klammern betrachten). Wie w\u00fcrden Sie vorgehen? Nicht implementieren, nur nachdenken. Folgende Beispiele: <pre><code>((()))()(())        // korrekt\n((())               // nicht korrekt\n(()))               // nicht korrekt\n())(                // nicht korrekt\n</code></pre></p> </li> </ol> Eine m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 2 <pre><code>package uebungen.uebung2.loesung;\n\npublic class Uebung2 {\n\npublic static boolean isBinaryNumber(String s)\n{\nfor(int index=0; index &lt; s.length(); index++)\n{\nchar c = s.charAt(index);\nif(!(c=='0' || c=='1'))\n{\nreturn false;\n}\n}\nreturn true;\n}\n\npublic static int binaryToDecimal(String s)\n{\nif(!isBinaryNumber(s)) return -1;\nint decimalNumber = 0;\nint exp = 0;\nfor(int index = s.length()-1; index &gt;= 0; index--)\n{\nchar c = s.charAt(index);\nint digit = c - '0';\nint value = digit * (int)Math.pow(2, exp);\ndecimalNumber += value;\nexp++;\n}\n\nreturn decimalNumber;\n}\n\npublic static String toLowerCase(String input)\n{\nString output = \"\";\nfinal int UPPER_TO_LOWER = 32;\n\nfor(int index=0; index &lt; input.length(); index++)\n{\nchar c = input.charAt(index);\nif(c &gt;= 'A' &amp;&amp; c&lt;= 'Z')\n{\nc = (char)(c + UPPER_TO_LOWER);\n}\noutput += c;\n}\nreturn output;\n}\n\npublic static boolean isPalindrome(String input)\n{\nString s = toLowerCase(input);\nboolean palindrome = true;\nwhile(palindrome &amp;&amp; s.length() &gt; 1)\n{\nchar c1 = s.charAt(0); char c2 = s.charAt(s.length() - 1);\nif(c1 == c2)\n{\ns = s.substring(1,s.length() - 1);\n}\nelse {\npalindrome = false;\n}\n}\nreturn palindrome;\n}\n\npublic static boolean checkBraces(String input)\n{\nint nrOpening = 0;  // man koennte auch fuer jede oeffnende ++ und\nint nrClosing = 0;  // jede schliessende -- und dann nur eine Variable\n// dann pruefen, ob nie negativ\nboolean correct = true;\nfor(int index=0; correct &amp;&amp; index &lt; input.length(); index++)\n{\nchar c = input.charAt(index);\nif(c== '(') {\nnrOpening++;\n}\nelse if(c== ')') {\nnrClosing++;\n}\n\nif(nrClosing &gt; nrOpening)   // dann waere hier &lt; 0\n{\ncorrect = false;\n}\n}\nif(nrOpening != nrClosing)      // dann waere hier == 0\n{\ncorrect = false;\n}\nreturn correct;\n}\n\npublic static void main(String[] args) {\nSystem.out.println(isBinaryNumber(\"101101\"));   // true\nSystem.out.println(isBinaryNumber(\"0\"));        // true\nSystem.out.println(isBinaryNumber(\"101a01\"));   // false\nSystem.out.println(isBinaryNumber(\"101201\"));   // false\n\nSystem.out.println(binaryToDecimal(\"101101\"));  // 45\nSystem.out.println(binaryToDecimal(\"0\"));       // 0\nSystem.out.println(binaryToDecimal(\"000001\"));  // 1\nSystem.out.println(binaryToDecimal(\"100000\"));  // 32\nSystem.out.println(binaryToDecimal(\"101a01\"));  // -1\nSystem.out.println(binaryToDecimal(\"101201\"));  // -1\n\nSystem.out.println(toLowerCase(\"abcdEFG\"));     // abcdefg\nSystem.out.println(toLowerCase(\"abcd123EFG\"));  // abcd123efg\nSystem.out.println(toLowerCase(\"ABC XYZ !%\"));  // abc xyz !%\n\nSystem.out.println(isPalindrome(\"Otto\"));       // true\nSystem.out.println(isPalindrome(\"abc_CBA\"));    // true\nSystem.out.println(isPalindrome(\"abc_-CBA\"));   // false\nSystem.out.println(isPalindrome(\"-\"));          // true\nSystem.out.println(isPalindrome(\"Dreh mal am Herd\"));   // false\n// das letzte waere okay, wenn man bei der Pruefung\n// die Leerzeichen ignorieren wuerde, waere auch moeglich\n}\n\n}\n</code></pre>"},{"location":"uebungen/#ubung-3-exceptions","title":"\u00dcbung 3 (Exceptions)","text":"\u00dcbung 3 <ol> <li> <p>Schreiben Sie ein Programm zur Eingabe von zwei Zahlen mithilfe der Klasse <code>JOptionPane</code> und deren Division! Fangen Sie folgende Ausnahmen ab:</p> <ul> <li>Falls die Eingabe keiner Zahl entspricht.</li> <li>Falls die zweite Zahl eine 0 ist.</li> </ul> </li> <li> <p>Scenario:</p> <ul> <li>Fenster zur Eingabe von Zahl 1 \u00f6ffnet sich:  </li> <li>falsche Eingabe - keine Zahl:   </li> <li>Fenster \u00f6ffnet sich erneut (andere Nachricht!):   </li> <li>Fenster zur Eingabe von Zahl 2 \u00f6ffnet sich:   </li> <li>die Division Zahl1/Zahl2 schl\u00e4gt fehl (<code>ArithmeticException</code>), deshalb (andere Nachricht!):   </li> <li>Ergebnis   </li> </ul> </li> <li> <p>Lagern Sie eine solche Eingabem\u00f6glichkeit in eine wiederverwendbare Methode aus, z.B. <code>public int inputInt(int min, int max)</code>, welche die eingegebene Zahl zur\u00fcckgibt, wobei die eingegebene Zahl im Bereich <code>[min, max]</code> liegen muss.</p> </li> <li> <p>Lesen Sie eine Zahl ein und geben Sie die Zahl umgedreht (r\u00fcckw\u00e4rts gelesen) wieder aus (f\u00fchrende Nullen entfallen):     <pre><code>3456789 --&gt; 9876543\n</code></pre></p> <pre><code>1000 --&gt; 1\n</code></pre> </li> <li> <p>Lesen Sie eine Zahl ein und geben Sie die Quersumme der Zahl aus.</p> <pre><code>123456 --&gt; 21\n</code></pre> <pre><code>1000 --&gt; 1      </code></pre> </li> </ol> <p>Viel Spa\u00df!</p>"},{"location":"wiederholung/","title":"Wiederholung","text":""},{"location":"wiederholung/#datentypen","title":"Datentypen","text":""},{"location":"wiederholung/#wertetypen","title":"Wertetypen","text":"<ul> <li>es wird der konkrete Wert in der Variablen gespeichert\u000b</li> <li>belegen abh\u00e4ngig vom Datentyp unterschiedlich viel Arbeitsspeicher \u2192 unterschiedliche Wertebereiche</li> </ul> Beispiele Wertetypen <pre><code>// boolean f\u00fcr Wahrheitswerte true und false\nboolean x = false;          // mit false initialisiert\nboolean wahr = true;        // Schluesselwort true\nboolean falsch = !wahr;     // Enthaelt den Wert false\n\n// byte, short, int, long f\u00fcr ganze Zahlen\nbyte a = 0;         // mit 0 initialisiert\nshort b = 124;      // Zuweisung einer ganzen Zahl\nint c = a + b;      // Wertebereich immer beachten!\nlong lo = c * 200;  // l nicht als Variablenname verwenden\n\n// char f\u00fcr ein einzelnes Zeichen - einfache Anfuehrungszeichen!\nchar zeichen = 'c';     // Doppelte \" f\u00fcr Strings!\u00a0\n\n// float und double f\u00fcr Flie\u00dfkommazahlen\nfloat f = 0.0f;         // Wird mit 0.0 initialisiert\ndouble d = 100.25;      // Dezimalpunkt statt Dezimalkomma!!\n</code></pre>"},{"location":"wiederholung/#referenztypen","title":"Referenztypen","text":"<ul> <li>es wird eine Referenz auf ein Objekt gespeichert\u000b</li> <li>Objekte besitzen Eigenschaften: Methoden (Verhalten) und Variablen (Zustand)</li> <li>Zugriff auf Methoden und Variablen \u00fcber den Punkt-Operator</li> </ul> Beispiele Referenztypen <pre><code>// Schluesselwort class um neue Klasse (Typ) zu definieren\npublic class Power {\nint base; // Objektvariablen, f\u00fcr jedes Objekt\nint exp;  // existieren Kopien im Arbeitsspeicher\n\npublic Power(int base, int exp)\n{\nthis.base = base;\nthis.exp = exp;\n}\n\n// Objektmethode\npublic void print()\n{\nSystem.out.println(this.base + \"^\" + this.exp);\n}\n}\n\n// irgendwo im Hauptprogramm\npublic static void main(String[] args)\u00a0{\nPower p1 = new Power(2,4);\nPower p2 = new Power(2,4);\np1.print();\np2.print();\nboolean equal = (p1 == p2);     // true oder false ?\n}\n</code></pre>"},{"location":"wiederholung/#datenstrukturen","title":"Datenstrukturen","text":""},{"location":"wiederholung/#variablen","title":"Variablen","text":"<ul> <li>einfachste Datenstruktur \u2192 speichern genau einen Wert (kann auch Referenz auf ein Objekt sein)</li> <li>sind von einem Datentyp (Wertetyp oder Referenztyp)</li> <li>haben einen Namen</li> <li>besitzen einen Wert<ul> <li>Wert kann sich bei Variablen zur Laufzeit \u00e4ndern (Wertzuweisungsoperator =)</li> <li>Wert von Konstanten kann nicht mehr ge\u00e4ndert werden (final)</li> </ul> </li> <li>besitzen einen G\u00fcltigkeitsbereich (den sogenannten Scope)<ul> <li>Scope einer Variable: der Anweisungsblock, in dem die Variable deklariert wurde</li> <li>lokale Variable: in einer Methode deklariert \u2192 dort lokal</li> <li>globale Variable: in einer Klasse deklariert \u2192 dort global</li> </ul> </li> </ul> Beispiele Variablen <pre><code>int zahlen = 0;             // konventionelle Variable\nfinal float PI = 3.14516f;  // Konstante\n\n// Erzeugen eines neuen Feldes (Arrays) und Zuweisen der Referenz\nint[] zahlenFeld = new int[100];\n\n// Klassen mit Objekt- und Klassenvariablen\npublic class Power {\nint base; // Objektvariablen, f\u00fcr jedes Objekt\nint exp;  // existieren Kopien im Arbeitsspeicher\n\npublic Power(int base, int exp)\n{\nthis.base = base;\nthis.exp = exp;\n}\n\npublic String toString()\n{\n// lokale Variable --&gt; nur in der Methode gueltig\nString output =\u00a0 this.base + \"^\" + this.exp;\nreturn output;\n}\n\n// Variablen sollten mit einem Kleinbuchstaben beginnen\n// Konstanten sollten nur mit Gro\u00dfbuchstaben benannt werden\n}\n</code></pre>"},{"location":"wiederholung/#arrays","title":"Arrays","text":"<ul> <li>Arrays sind Objekte (Referenztypen)</li> <li>speichern eine festgelegte Anzahl von Werten eines festgelegten Datentyps (k\u00f6nnen Werte- und Referenztypen sein)</li> <li>besitzen Methoden (z.B. <code>sort()</code>) und Variablen (z.B. <code>length</code>)</li> <li>k\u00f6nnen auch mehrdimensional sein</li> <li>Zugriff auf Elemente mit eckigen Klammern unter Verwndung des Indexes</li> </ul> Beispiele Arrays <pre><code>// Einfache Deklaration -&gt; nur Datentyp bekannt, keine Laenge\nint[] zahlen;           // Eckige Klammern f\u00fcr Array-Datentyp\n\n// Erzeugen eines neuen Feldes und Zuweisen der Referenz\nzahlen = new int[100];  // new-Operator, hier: Angabe der Laenge\n\n// Explizite Initialisierung bei der Deklaration\n// Bei Initialisiert mit Werten --&gt; keine Laengenangabe noetig\nfloat[] werte = new float[10];      // Platz f\u00fcr 10 Werte \ndouble[] fib = { 1.0, 2.0, 3.0 };   // Werte in {}-Klammern\n\n// Mehrdimensionale Felder\nint[][] hdBild = new int[1920][1080];\n\n// Felder k\u00f6nnen f\u00fcr alle Datentypen verwendet werden\nPower[] potenzen = new Power[5];    // Noch keine Objekte enthalten\npotenzen[0] = new Power(2, 4);      // Zuweisung Objekt an Index 0\n</code></pre>"},{"location":"wiederholung/#literale","title":"Literale","text":"<ul> <li>sind Werte</li> <li>sind von einem bestimmten Datentyp (kann auch ein Referenztyp sein)</li> <li>keine ausf\u00fchrbare Einheit \u2192 kein Ausdruck \u2192 k\u00f6nnen nicht alleine stehen</li> <li>meistens <ul> <li>auf der rechten Seite einer Wertzuweisung</li> <li>als Parameterwert bei Aufruf einer Methode</li> <li>als Vergleichswert bei logischen Ausdr\u00fccken</li> </ul> </li> </ul> Beispiele Literale <pre><code>100\ntrue\n'a'\n\"hallo\"\n{1,2,3,4}\n5.5\n</code></pre>"},{"location":"wiederholung/#ausdrucke","title":"Ausdr\u00fccke","text":"<ul> <li>kleinste ausf\u00fchrbare Einheit eines Programms</li> <li> <p>z.B.:</p> <ul> <li>Zuweisung</li> <li>numerische Berechnung</li> <li>logische Bedingung</li> </ul> </li> <li> <p>Operatoren:</p> <ul> <li>arithmetisch:     <code>+, -, *, /, %, ++, --</code></li> <li>relational:       <code>==, !=, &lt;, &gt;, &lt;=, &gt;=</code></li> <li>logisch:          <code>!, &amp;&amp;, ||</code></li> <li>Zuweisung:        <code>=, +=, -=, *=, /=, %=</code></li> <li>sonstige:         <code>a?b:c, typecast, new, instanceof, .</code></li> </ul> </li> </ul>"},{"location":"wiederholung/#anweisungen","title":"Anweisungen","text":"<ul> <li>Einzelanweisung       <code>;</code></li> <li>Block                 <code>{}</code></li> <li>Deklaration           <code>Typ Methode</code>, <code>Typ Variable</code></li> <li>Ausdruck</li> <li>Bedingung             <code>if() else  switch() case</code></li> <li>Schleifen             <code>for        while       do while</code></li> <li>Exceptions            <code>try catch()</code></li> <li>Assertions            <code>assert</code></li> </ul> Beispiele Anweisungen <pre><code>// Bloecke immer zwischen geschweiften Klammern\n{\n// Anweisung 1...\n// Anweisung 2...\n}\n\n// Definition und Deklaration\nint a;\nfloat b = 1.0f;\n\n// Einfacher Ausdruck\na = 1010;\u00a0// Bedingungen\nif (a == 1010)\u00a0         // if-Zweig muss immer vorhanden sein\n{\n// Anweisungen...\n}\nelse if (a == 1011)\u00a0    // 0 - beliebig viele else-if-Zweige\n{\n// Anweisungen...\n}\nelse\u00a0           // 0 - 1 else-Zweig\n{\n// Anweisungen...\n}\n\nswitch (a)      // zu pruefende Variable in Klammern\n{\ncase 1010: { b*=2.0; break; }   // beliebig viele case-Zweige\ncase 1011: { b*=3.0; break; }   // break nicht vergessen\ndefault: { b=0.0f; }            // Zweig f\u00fcr alle anderen Werte\n}\n\nint[] meinFeld = {1,2,3,4,5};\n// for-Schleife\n// 1. Initialisierung\n// 2. Schleifen-Bedingung\n// 3. Anweisungen nach Schleifendurchlauf\n// Schleifen-Anweisungen als Block hinter for\nfor (int index = 0; index &lt; meinFeld.length; index++) {\nSystem.out.println(meinFeld[index]);\n}\n\n// while-Schleife\n// Nur Schleifen-Bedingung angeben\n// Auf Endlos-Schleifen achten\nwhile (index &lt; meinFeld.length) {\u00a0System.out.println(meinFeld[index]);\nindex++;\n}\n</code></pre>"},{"location":"wiederholung/#methoden","title":"Methoden","text":"<ul> <li>wiederverwendbare und/oder logisch abgeschlossene Programmteile sollten in Methoden zusammengefasst werden</li> <li>Methoden besitzen einen Namen (im Scope eindeutig), keinen, einen oder mehrere Parameter und einen R\u00fcckgabetyp (evtl. <code>void</code>)</li> <li>Aufruf einer Methode durch Namen und runde Klammern, in welche Werte f\u00fcr die Parameter \u00fcbergeben werden</li> <li>bei Aufruf einer Methode werden alle Anweisungen abgearbeitet, die in der Methode definiert (implementiert) wurden (bis zum <code>return</code>)</li> <li>werden Methoden mit R\u00fcckgabetyp (also nicht <code>void</code>) aufgerufen, entspricht ihr Aufruf einem konkreten Wert (R\u00fcckgabewert)</li> </ul> Methodenstack/Call stack <pre><code>public static int multiply(int a, int b) {\nreturn a*b;\n}\n\npublic static int square(int n) {\nreturn multiply(n,n);\n}\n\npublic static void printSquare(int n) {\nint squared = square(n);\nSystem.out.println(n + \" x \" + n + \" = \"\u00a0+ squared);\n}\n\npublic static void main(String[] args) {\nprintSquare(4);\n}\n</code></pre>"},{"location":"wiederholung/#vererbung","title":"Vererbung","text":"<ul> <li>Weitergabe aller Methoden und Objekte einer Elternklasse (Basisklasse) an eine Kindklasse (Subklasse)</li> <li>Schl\u00fcsselwort <code>extends</code></li> <li>jede Klasse (bis auf <code>Object</code>) besitzt genau eine Elternklasse; ist keine angegeben, ist es automatisch <code>Object</code></li> <li>Vererbung beschreibt \u201eis-a\u201c-Beziehung</li> <li>Methoden der Elternklasse k\u00f6nnen \u00fcberschrieben werden (wenn sie nicht als <code>final</code> definiert wurden) \u2192 @Override verwenden</li> <li>Originalmethode kann mit Schl\u00fcsselwort <code>super</code> aufgerufen werden</li> </ul>"},{"location":"wiederholung/#konstruktoren","title":"Konstruktoren","text":"<ul> <li>besondere Objektmethoden, die beim Erzeugen des Objektes aufgerufen werden</li> <li>gleicher Name wie die Klasse, keinen R\u00fcckgabetyp angeben (auch nicht <code>void</code>)</li> <li>wird kein Konstruktor definiert, steht automatisch (implizit) ein parameterloser Konstruktor zur Verf\u00fcgung (einzige Ausnahme: in der Elternklasse existieren nur parametrisierte Konstruktoren)</li> <li>Aufruf von <code>this</code> und <code>super</code> m\u00f6glich</li> <li>werden nicht vererbt</li> </ul> Beispiele Konstruktoren <pre><code>public class Power {\nint base;\nint exp;\n\npublic Power()\n{\nthis(1,0);  // Aufruf des Konstruktors in Zeile 15\n}\n\npublic Power(int base)\n{\nthis(base, 0);  // Aufruf des Konstruktors in Zeile 15\n}\n\npublic Power(int base, int exp)\n{\nthis.base=base;     // Parameterwerte f\u00fcr base und int\nthis.exp=exp;       // auf Objektvariablen sichern\n}\n}\n\npublic static void main(String[] args) {\nPower p1 = new Power();         // p1.base = 1, p1.exp = 0\nPower p2 = new Power(10);       // p2.base = 10, p2.exp = 0\nPower p3 = new Power(10,5);     // p3.base = 10, p3.exp = 5\n}\n</code></pre>"},{"location":"wiederholung/#access-controller-zugriffsmodifizierer","title":"Access Controller (Zugriffsmodifizierer)","text":"<ul> <li>Steuerung der Lebensdauer, Sichtbarkeit und Ver\u00e4nderbarkeit von Klassen, Methoden und Variablen \u2013 Prinzip der Datenkapselung</li> <li> <p>Klassen</p> <ul> <li><code>public</code>      Zugriff von au\u00dferhalb des Paketes</li> <li>(default)     Zugriff nur innerhalb des Paketes</li> <li><code>final</code>       von der Klasse k\u00f6nnen keine Klassen erben</li> <li><code>abstract</code>    Klasse besitzt Methoden, die keinen Methodenrumpf besitzen (nicht implementiert sind)</li> </ul> </li> <li> <p>Variablen und Methoden (wenn Klasse <code>public</code>)</p> <ul> <li><code>public</code>      Zugriff von \u00fcberall (bei Variablen vermeiden!)</li> <li><code>protected</code>   Zugriff aus Klasse und Kindklasse</li> <li>(default)     Zugriff aus Klasse und Paket</li> <li><code>private</code>         Zugriff nur aus Klasse </li> </ul> </li> </ul>"},{"location":"wiederholung/#kleinigkeiten-die-wir-nicht-betrachtet-haben","title":"\"Kleinigkeiten\", die wir nicht betrachtet haben","text":""},{"location":"wiederholung/#das-schlusselwort-static","title":"Das Schl\u00fcsselwort <code>static</code>","text":"<p>Mit dem Schl\u00fcsselwort <code>static</code> beschreiben wir eine Eigenschaft der Klasse. Das Schl\u00fcsselwort <code>static</code> kann verwendet werden f\u00fcr</p> <ul> <li>Die Deklaration einer (Klassen-)Variablen. Eine Klassenvariable existiert f\u00fcr die Klasse genau ein Mal (alle Objekte der Klasse \"teilen\" sich diese eine Variable). </li> <li>Die Deklaration einer (Klassen-)Methode. Eine statische Methode (Klassenmethode) kann aufgerufen werden, ohne ein Objekt der Klasse zu erzeugen. Wir werden h\u00e4ufig statische Methoden in der Programmklasse (die Klasse mit der <code>main()</code>-Methode) erstellen, um diese in der <code>main()</code>-Methode aufzurufen, ohne vorher ein Objekt der Programmklasse erzeugen zu m\u00fcssen. </li> <li>Die Deklaration einer Klasse, wenn diese eine Klasse in einer anderen Klasse ist. Dazu kommen wir sp\u00e4ter.</li> </ul> <p>Der Zugriff auf eine statische Variable bzw. statische Methode erfolgt ebenfalls per Punktnotation, aber vor dem Punkt steht dann der Klassenname. H\u00e4ufig wird der Klassenname und der Punkt aber auch weggelassen. </p>"},{"location":"wiederholung/#die-for-each-schleife","title":"Die for-each-Schleife","text":"<p>Wir haben ein Array stets so durchlaufen, dass wir in einer <code>for</code>-Schleife jeden m\u00f6glichen Index f\u00fcr das Array erzeugt haben und dann \u00fcber den Index auf den Wert der einzelnen Elemente zugegriffen haben, also z.B.:</p> <pre><code>int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9 };\nfor (int index = 0; index &lt; args.length; index++) {\nSystem.out.print(numbers[index]);\n}\n</code></pre> <p>Wenn wir alle Elemente eines Arrays lesen wollen, k\u00f6nnen wir das aber auch so machen:</p> <pre><code>int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9 };\nfor(int number : numbers)\n{\nSystem.out.print(number);\n}\n</code></pre> <p>Wir bezeichnen diese Schleifensyntax auch als for-each-Schleife. Die allgemeine Syntax ist</p> <pre><code>for(TypElement variablenNameElement : nameDesArrays)\n{\n// hier lesende Verwendung von variablenNameElement\n}\n</code></pre> <p>Beachten Sie, dass Sie mit der for-each-Schleife nur lesenden Zugriff auf die Elemente des Arrays haben. Wenn Sie z.B. schreiben</p> <pre><code>int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9 };\nfor(int number : numbers)\n{\nnumber = 5;\n}\n</code></pre> <p>, dann \u00e4ndert das nichts an den Werten im Array! Beachten Sie aber auch, dass das Element ja auch eine Referenz auf ein Objekt sein k\u00f6nnte, dann verh\u00e4lt es sich nat\u00fcrlich anders, wenn Sie daf\u00fcr Objektmethoden aufrufen, die \u00c4nderungen am Objekt bewirken (Setter). </p>"},{"location":"wiederholung/#die-klasse-javautilarrays","title":"Die Klasse <code>java.util.Arrays</code>","text":"<p>Die Klasse <code>Arrays</code> aus dem <code>java.util</code>-Paket hat einige n\u00fctzliche Methoden f\u00fcr Arrays. Insbesondere interessant d\u00fcrfte die <code>toString()</code>-Methode sein. Wir werden diese Klasse manchmal verwenden, wenn wir uns z.B. keine eigenen <code>toString()</code>-Methoden f\u00fcr unsere Arrays schreiben wollen. Die Dokumentation der Klasse <code>Arrays</code> finden Sie z.B. hier. Beachten Sie, dass Sie zum Verwenden der Klasse das <code>java.util</code>-Paket importieren m\u00fcssen. </p> <pre><code>int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9 };\nSystem.out.println(Arrays.toString(numbers));\n</code></pre> <p>Weitere interessante Methoden dieser Klasse sind <code>copyOf()</code>, <code>binarySearch()</code> und <code>sort()</code>. </p> \u00dcbung <p>Ist die <code>toString()</code>-Methode der <code>Arrays</code>-Klasse statisch oder handelt es sich um eine Objektmethode?</p>"},{"location":"wrapper/","title":"Wrapper-Klassen","text":"<p>Motivation</p> <p>Letzte Woche haben wir mit folgender Fragestellung geendet: Wie wandeln wir einen <code>String</code> zu einem <code>int</code> (oder <code>double</code>) um? Die Antwort, die uns den Ausblick auf das Thema der heutigen Woche gibt, war: mit Wrapper-Klassen.</p> <p>In Programmierung I haben wir am Anfang die Datentypen <code>int</code>, <code>boolean</code>, <code>double</code>, <code>char</code>, <code>long</code> usw. kennengelernt. Wir haben diese Datentypen als Wertetypen kennenglernt, denn sie k\u00f6nnen nur Werte abbilden. Das Gegenst\u00fcck dazu sind Referenztypen, welche Referenzen auf Objekte repr\u00e4sentieren. F\u00fcr jeden Wertetyp gibt es aber auch einen entsprechenden Referenztyp, die sogenannten Wrapper-Klassen. Diese sind <code>Integer</code>, <code>Double</code>, <code>Float</code>, <code>Short</code>, <code>Byte</code>, <code>Long</code>, <code>Character</code> und <code>Boolean</code> und befinden sich im <code>java.lang</code>-Paket (also dem Standardpaket von Java - muss nicht importiert werden). Wir werden diese Wrapper-Klassen dieses Semester h\u00e4ufiger verwenden, insbesondere wenn wir Collections kennenlernen. </p> <p>Die grunds\u00e4tzliche Idee von Wrapper-Klassen ist das \"Verpacken\" (wrappen) eines Wertetyps in einen Referenztyp. Die folgende Abbildung soll das f\u00fcr das Beispiel <code>int</code> \u2194 <code>Integer</code> verdeutlichen:</p> <p></p> <p>Der <code>int</code>-Wert <code>10</code> wird zu einem Typ <code>Integer</code> und somit zu einem Referenztyp. Daf\u00fcr sind alle Vorteile von Referenztypen nutzbar, z.B. Objektmethoden, Vererbung usw. </p> <p>Welche Wrapper-Klasse zu welchem Wertetyp geh\u00f6rt, wird aus dem Namen erkennbar. Leider ist das aber nicht ganz konsistent. W\u00e4hrend die Wrapper-Klassen von <code>boolean</code>, <code>byte</code>, <code>short</code>, <code>long</code>, <code>float</code> und <code>double</code> so hei\u00dfen, wie die Wertetypen, nur jeweils mit einem Gro\u00dfbuchstaben am Anfang, hei\u00dft die Wrapper-Klasse von <code>char</code> <code>Character</code> und die Wrapper-Klasse von <code>int</code> <code>Integer</code>. </p>  Wertetyp  Referenztyp (Wrapper-Klasse)  <code>byte</code> <code>Byte</code> <code>short</code> <code>Short</code> <code>int</code> <code>Integer</code> <code>long</code> <code>Long</code> <code>float</code> <code>Float</code> <code>double</code> <code>Double</code> <code>boolean</code> <code>Boolean</code> <code>char</code> <code>Character</code>"},{"location":"wrapper/#objekterzeugung","title":"Objekterzeugung","text":"<p>Es gibt ziemlich viele M\u00f6glichkeiten, um Objekte eines Wrapper-Klassen-Typs zu erzeugen:</p> <ul> <li>Verwendung des Kontruktors, Parameterwert entweder vom Typ <code>String</code> oder vom entsprechenden Wertetyp,</li> <li>Verwendung der statischen Methode <code>valueOf()</code>,  Parameterwert entweder vom Typ <code>String</code> oder vom entsprechenden Wertetyp,</li> <li>sogenanntes Boxing (automatisches wrappen eins Wertes in seinen Referenztyp).</li> </ul> <p>Wir schauen uns die drei M\u00f6glichkeiten am Beispiel von <code>Integer</code> an. Es gilt aber f\u00fcr alle Wrapper-Klassen. </p>"},{"location":"wrapper/#verwendung-des-kontruktors-deprecated","title":"Verwendung des Kontruktors - deprecated","text":"<p>F\u00fcr jede Wrapper-Klasse stehen zwei parametrisierte Konstruktoren zur Verf\u00fcgung, entweder wird ein entsprechender Wert \u00fcbergeben (am Beispiel von <code>Integer</code> als ein <code>int</code>-Wert) oder es wird ein <code>String</code> \u00fcbergeben, der idealerweise einen passenden Wert ent\u00e4lt, also f\u00fcr <code>Integer</code> soll der <code>String</code> eine Zahl enthalten. Am Beispiel von <code>Integer</code> k\u00f6nnte das z.B. so aussehen:</p> <pre><code>// Konstruktor mit Uebergabe Wertetyp\nint i = 100;\nInteger iObject1 = new Integer(i);\nInteger iObject2 = new Integer(100);\n\n// Konstruktor mit Uebergabe String\nString s = \"100\";\nInteger iObject3 = new Integer(s);\nInteger iObject4 = new Integer(\"100\");\n\n// Moeglich f\u00fcr alle numerischen Datentypen und boolean\n</code></pre> <p>F\u00fcr <code>Character</code> gibt es nur einen parametrisierten Konstruktor: <code>Character\u200b(char value)</code>. Die \u00dcbergabe eines <code>Strings</code> ist dort nicht m\u00f6glich. </p> <p>Wichtig hier ist zu betonen, dass man die Konstruktoren jedoch nicht verwenden sollte. Das hat haupts\u00e4chlich Performance-Gr\u00fcnde, sowohl in Zeit als auch in Speicher. Seit Java 9 gelten die Konstruktoren als deprecated, sollten also nicht mehr verwendet werden. Stattdessen wird empfohlen, die statischen Methoden <code>valueOf()</code> zu verwenden. </p>"},{"location":"wrapper/#die-valueof-methoden","title":"Die <code>valueOf()</code>-Methoden","text":"<p>Die <code>valueOf()</code>-Methoden der Wrapper-Klassen haben zwei wichtige Eigenschaften:</p> <ol> <li>sie sind statisch, d.h. der Aufruf erfolgt \u00fcber <code>Klassenname.valueOf()</code>,</li> <li>sie sind sogenannte Erzeugermethoden, denn sie geben ein Objekt der Klasse zur\u00fcck</li> </ol> <p>Wie bei den Konstruktoren auch, k\u00f6nnen der Methode entweder ein Wert vom entsprechenden Typ oder ein <code>String</code> \u00fcbergeben werden, der ein Wert von dem Wertetyp enth\u00e4lt. Beispiele</p> <pre><code>// Wrapper-Klassen haben die Klassenmethoden\n// valueOf(Wertetyp b) ...\nInteger iObject1 = Integer.valueOf(100);\nBoolean bObject1 = Boolean.valueOf(true);\nDouble  dObject1 = Double.valueOf(5.5);\n\n// ... oder valueOf(String s)\nInteger iObject2 = Integer.valueOf(\"100\");\nBoolean bObject2 = Boolean.valueOf(\"true\");\nDouble  dObject2 = Double.valueOf(\"5.5\");\n</code></pre> <p>Auch hier gilt wieder, dass f\u00fcr <code>Character</code> nur eine <code>valueOf()</code>-Methode existiert, n\u00e4mlich <code>valueOf(char c)</code>. Die \u00dcbergabe eines <code>Strings</code> ist nicht m\u00f6glich. </p>"},{"location":"wrapper/#auto-boxing","title":"Auto-Boxing","text":"<p>Die dritte M\u00f6glichkeit, Objekte einer Wrapper-Klasse zu erzeugen, besteht darin, den entsprechenden Wert automatisch \"wrappen\" zu lassen, das sogenannte Auto-Boxing.  Beispiele:</p> <pre><code>Integer   io1 = 100;\nBoolean   bo1 = true;\nCharacter co1 = 'a';\nDouble    do1 = 5.5;\nFloat     fo1 = 2.7f;\nLong      lo1 = 1234L;\n</code></pre> <p>Wahrscheinlich wird diese Form der Objekterzeugung die von Ihnen am meisten verwendete werden. Das ist auch v\u00f6llig in Ordnung. Sie sollten sich nur dessen bewusst sein, dass dabei ein solches Auto-Boxing passiert. Es ist empfehlenswert, gerade zu Anfang, Eclipse (oder Ihre IDE) so einzustellen, dass Sie eine Warnung erhalten, wenn ein solches Auto-Boxing passiert. das hat den Vorteil, dass die dieses Vorgehen nicht aus dem Blick verlieren, sondern dass Ihnen bewusst bleibt, dass die Werte gerade in eine Referenz umgewandelt werden. W\u00e4hlen Sie dazu in Eclipse unter <code>Eclipse</code> \u2192 <code>Preferences</code> \u2192 <code>Java</code> \u2192 <code>Compiler</code> \u2192 <code>Errors/Warnings</code> folgende Einstellungen:</p> <p></p> <p>\u00dcbung</p> <p>Was wird ausgegeben und warum?  <pre><code>    Integer i1 = 5000;\nInteger i2 = 5000;\n\nSystem.out.println(i1 == i2);\n</code></pre></p>"},{"location":"wrapper/#werte-extrahieren","title":"Werte extrahieren","text":"<p>H\u00e4ufig wollen wir aus unseren Wrapper-Objekten wieder die \"Werte extrahieren\", also z.B. erfahren, welcher <code>int</code>-Wert von einem <code>Integer</code>-Objekt repr\u00e4sentiert wird. Um das zu tun, stellen die Wrapper-Klassen jeweils <code>&lt;wrapperTyp&gt;Value()</code>-Objektmethoden zur Verf\u00fcgung also: <code>intValue()</code>, <code>doubleValue()</code>, <code>charValue()</code>, <code>booleanValue()</code> usw. Betrachten wir nochmal die Beispiele von eben:</p> <pre><code>Integer   io1 = 100;\nBoolean   bo1 = true;\nCharacter co1 = 'a';\nDouble    do1 = 5.5;\nFloat     fo1 = 2.7f;\nLong      lo1 = 1234L;\n\nint     i1 = io1.intValue();        // 100\nboolean b1 = bo1.booleanValue();    // true\nchar    c1 = co1.charValue();       // 'a'\ndouble  d1 = do1.doubleValue();     // 5.5\nfloat   f1 = fo1.floatValue();      // 2.7\nlong    l1 = lo1.longValue();       // 1234\n</code></pre> <p>Aber auch hier gibt es wieder ein Auto-Unboxing. Das hei\u00dft, es w\u00e4re auch m\u00f6glich auf die <code>&lt;wrapperTyp&gt;Value()</code>-Objektmethode zu verzichten und stattdessen einfach das hier zu schreiben:</p> <pre><code>int     i2 = io1;   // 100\nboolean b2 = bo1;   // true\nchar    c2 = co1;   // 'a'\ndouble  d2 = do1;   // 5.5\nfloat   f2 = fo1;   // 2.7\nlong    l2 = lo1;   // 1234\n</code></pre> <p>Auch hier sollte man sich aber stets der Tatsache bewusst sein, dass ein Unboxing passiert. </p> <p>\u00dcbung</p> <p>Geht das und wenn ja, warum? Was wird jeweils ausgegeben? <pre><code>    Integer i1 = 5000;\nInteger i2 = 5000;\nInteger i3 = 5001;\n\nSystem.out.println(i1 &gt;= i2);\nSystem.out.println(i3 &gt; i2);\n</code></pre></p> <p>Die folgende Abbildung zeigt einen \u00dcberblick \u00fcber die einzelnen Konvertierungen am Beispiel von <code>Double</code>. Beachten Sie dabei auch, dass ein Wert direkt aus einem passenden <code>String</code> erzeugt werden kann, indem die statische <code>&lt;WrapperTyp&gt;.parse&lt;WrapperTyp&gt;</code>-Methode verwendet wird. </p> <p></p>"},{"location":"wrapper/#strings-in-wertetypen","title":"Strings in Wertetypen","text":"<p>Wir wissen jetzt schon, dass wir uns mithilfe der <code>valueOf(String s)</code>-Methode Objekte einer Wrapper-Klasse erzeugen k\u00f6nnen. Unter Verwendung von <code>intValue()</code> k\u00f6nnte man z.B. aus einem <code>Intger</code>-Objekt den <code>int</code>-Wert extrahieren. Das ginge auch mit Auto-Unboxing. F\u00fcr die Umwandlung von <code>String</code> nach <code>int</code> verwendet man aber am besten die <code>parseInt()</code>-Methode. </p> <pre><code>String eingabe = JOptionPane.showInputDialog(\"Geben Sie eine Zahl ein: \");\nint zahl = Integer.parseInt(eingabe);\n</code></pre> <p>F\u00fcr <code>double</code> steht uns daf\u00fcr <code>Double.parseDouble(String s)</code> zur Verf\u00fcgung usw. </p> <p>Success</p> <p>Jetzt haben wir unser Problem gel\u00f6st, wir k\u00f6nnen <code>String</code> in einen <code>int</code> umwandeln! Wir kennen nun Wrapper-Klassen und deren <code>parseXXX(String)</code>-Methoden.</p>"},{"location":"wrapper/#links-zu-den-java-docs","title":"Links zu den Java-Docs","text":"<p>Hier sind die Links zu den jeweiligen Java-Dokumentationen der Klassen aufgelistet (f\u00fcr Java 11). Ein Blick lohnt sich, da f\u00fcr die einzelnen Klassen jeweils viele Objektmethoden zur Verf\u00fcgung stehen, die Ihnen sehr n\u00fctzlich sein k\u00f6nnen. </p> <ul> <li>Boolean</li> <li>Byte</li> <li>Character</li> <li>Double</li> <li>Float</li> <li>Integer</li> <li>Long</li> <li>Short</li> </ul> <p>\u00dcbrigens erben die numerischen Datentypen alle von der Klasse Number. Diese enth\u00e4lt die Objektmethoden <code>byteValue()</code>, <code>doubleValue()</code>, <code>floatValue()</code>, <code>intValue()</code>, <code>longValue()</code> und <code>shortValue()</code>. Deswegen werden in allen numerischen Wrapper-Klassen auch alle diese Objektmethoden zur Verf\u00fcgung gestellt. </p> <p>\u00dcbung</p> <p>Diese \u00dcbung gibt ein Hinweis auf das folgende Thema: Schauen Sie sich einmal die Java-Dokumentation der Klasse <code>Integer</code> an. Welche Exception kann die <code>parseInt(String)</code>-Methode werfen? </p>"},{"location":"wrapper/#ausblick","title":"Ausblick","text":"<p>Wir wissen nun, wie wir einen <code>String</code> in ein <code>int</code> umwandeln. N\u00e4mlich mithilfe der <code>parseInt(String)</code>-Methode der Klasse <code>Integer</code>. Was aber passiert, wenn der <code>String</code> gar keiner Zahl entspricht? Dann wird eine Exception geworfen und das Programm sofort beendet. Wir k\u00f6nnen aber gar nichts daf\u00fcr, dass die Nutzerin keine Zahl eingegeben hat. Unser Programm ist eigentlich korrekt. Wie k\u00f6nnen wir den Programmabsturz verhindern? Wie k\u00f6nnen wir die Nutzerin solange bitten, eine Zahl einzugeben, bis sie wirklich eine Zahl eingibt?</p>"}]}